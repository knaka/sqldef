// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const POSIX_REGEX = 57427
const POSIX_REGEX_CI = 57428
const POSIX_NOT_REGEX = 57429
const POSIX_NOT_REGEX_CI = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const MATERIALIZED = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const PRIMARY = 57456
const COLUMN = 57457
const CONSTRAINT = 57458
const REFERENCES = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const FOREIGN = 57462
const KEY_BLOCK_SIZE = 57463
const POLICY = 57464
const WHILE = 57465
const UNIQUE = 57466
const KEY = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const TYPE = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const RESTRICT = 57488
const CASCADE = 57489
const NO = 57490
const ACTION = 57491
const PERMISSIVE = 57492
const RESTRICTIVE = 57493
const PUBLIC = 57494
const CURRENT_USER = 57495
const SESSION_USER = 57496
const PAD_INDEX = 57497
const FILLFACTOR = 57498
const IGNORE_DUP_KEY = 57499
const STATISTICS_NORECOMPUTE = 57500
const STATISTICS_INCREMENTAL = 57501
const ALLOW_ROW_LOCKS = 57502
const ALLOW_PAGE_LOCKS = 57503
const BEFORE = 57504
const AFTER = 57505
const EACH = 57506
const ROW = 57507
const SCROLL = 57508
const CURSOR = 57509
const OPEN = 57510
const CLOSE = 57511
const FETCH = 57512
const PRIOR = 57513
const FIRST = 57514
const LAST = 57515
const DEALLOCATE = 57516
const DEFERRABLE = 57517
const INITIALLY = 57518
const IMMEDIATE = 57519
const DEFERRED = 57520
const CONCURRENTLY = 57521
const BEGIN = 57522
const START = 57523
const TRANSACTION = 57524
const COMMIT = 57525
const ROLLBACK = 57526
const BIT = 57527
const TINYINT = 57528
const SMALLINT = 57529
const SMALLSERIAL = 57530
const MEDIUMINT = 57531
const INT = 57532
const INTEGER = 57533
const SERIAL = 57534
const BIGINT = 57535
const BIGSERIAL = 57536
const INTNUM = 57537
const REAL = 57538
const DOUBLE = 57539
const PRECISION = 57540
const FLOAT_TYPE = 57541
const DECIMAL = 57542
const NUMERIC = 57543
const SMALLMONEY = 57544
const MONEY = 57545
const TIME = 57546
const TIMESTAMP = 57547
const DATETIME = 57548
const YEAR = 57549
const DATETIMEOFFSET = 57550
const DATETIME2 = 57551
const SMALLDATETIME = 57552
const CHAR = 57553
const VARCHAR = 57554
const VARYING = 57555
const BOOL = 57556
const CHARACTER = 57557
const VARBINARY = 57558
const NCHAR = 57559
const NVARCHAR = 57560
const NTEXT = 57561
const UUID = 57562
const TEXT = 57563
const TINYTEXT = 57564
const MEDIUMTEXT = 57565
const LONGTEXT = 57566
const CITEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const JSONB = 57573
const ENUM = 57574
const GEOMETRY = 57575
const POINT = 57576
const LINESTRING = 57577
const POLYGON = 57578
const GEOMETRYCOLLECTION = 57579
const MULTIPOINT = 57580
const MULTILINESTRING = 57581
const MULTIPOLYGON = 57582
const VARIADIC = 57583
const ARRAY = 57584
const NOW = 57585
const GETDATE = 57586
const BPCHAR = 57587
const TEXT_PATTERN_OPS = 57588
const NULLX = 57589
const AUTO_INCREMENT = 57590
const APPROXNUM = 57591
const SIGNED = 57592
const UNSIGNED = 57593
const ZEROFILL = 57594
const ZONE = 57595
const AUTOINCREMENT = 57596
const DATABASES = 57597
const TABLES = 57598
const VITESS_KEYSPACES = 57599
const VITESS_SHARDS = 57600
const VITESS_TABLETS = 57601
const VSCHEMA_TABLES = 57602
const EXTENDED = 57603
const FULL = 57604
const PROCESSLIST = 57605
const NAMES = 57606
const CHARSET = 57607
const GLOBAL = 57608
const SESSION = 57609
const ISOLATION = 57610
const LEVEL = 57611
const READ = 57612
const WRITE = 57613
const ONLY = 57614
const REPEATABLE = 57615
const COMMITTED = 57616
const UNCOMMITTED = 57617
const SERIALIZABLE = 57618
const NEW = 57619
const CURRENT_TIMESTAMP = 57620
const DATABASE = 57621
const CURRENT_DATE = 57622
const CURRENT_TIME = 57623
const LOCALTIME = 57624
const LOCALTIMESTAMP = 57625
const UTC_DATE = 57626
const UTC_TIME = 57627
const UTC_TIMESTAMP = 57628
const REPLACE = 57629
const CONVERT = 57630
const CAST = 57631
const SUBSTR = 57632
const SUBSTRING = 57633
const GROUP_CONCAT = 57634
const SEPARATOR = 57635
const INHERIT = 57636
const MATCH = 57637
const AGAINST = 57638
const BOOLEAN = 57639
const LANGUAGE = 57640
const WITH = 57641
const WITHOUT = 57642
const PARSER = 57643
const QUERY = 57644
const EXPANSION = 57645
const UNUSED = 57646
const VIRTUAL = 57647
const STORED = 57648
const GENERATED = 57649
const ALWAYS = 57650
const IDENTITY = 57651
const SEQUENCE = 57652
const INCREMENT = 57653
const MINVALUE = 57654
const CACHE = 57655
const CYCLE = 57656
const OWNED = 57657
const NONE = 57658
const CLUSTERED = 57659
const NONCLUSTERED = 57660
const REPLICATION = 57661
const INCLUDE = 57662
const HOLDLOCK = 57663
const NOLOCK = 57664
const NOWAIT = 57665
const PAGLOCK = 57666
const ROWLOCK = 57667
const TABLELOCK = 57668
const TYPECAST = 57669
const CHECK = 57670

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	127, 143,
	-2, 133,
	-1, 36,
	161, 474,
	162, 474,
	-2, 464,
	-1, 275,
	114, 832,
	-2, 828,
	-1, 276,
	114, 833,
	-2, 829,
	-1, 277,
	114, 834,
	-2, 225,
	-1, 318,
	259, 843,
	-2, 726,
	-1, 350,
	81, 1058,
	-2, 82,
	-1, 351,
	81, 1008,
	-2, 83,
	-1, 357,
	81, 987,
	-2, 799,
	-1, 359,
	81, 1032,
	-2, 801,
	-1, 614,
	259, 843,
	-2, 502,
	-1, 663,
	259, 843,
	-2, 502,
	-1, 692,
	52, 41,
	54, 41,
	-2, 43,
	-1, 855,
	114, 836,
	-2, 831,
	-1, 992,
	137, 381,
	-2, 992,
	-1, 1110,
	259, 843,
	-2, 502,
	-1, 1132,
	5, 28,
	-2, 623,
	-1, 1158,
	5, 27,
	-2, 772,
	-1, 1205,
	56, 354,
	-2, 351,
	-1, 1222,
	114, 834,
	-2, 225,
	-1, 1447,
	5, 27,
	-2, 90,
	-1, 1448,
	5, 27,
	-2, 91,
	-1, 1506,
	5, 28,
	-2, 773,
	-1, 1611,
	5, 27,
	-2, 775,
	-1, 1752,
	184, 54,
	-2, 162,
	-1, 1780,
	5, 28,
	-2, 776,
	-1, 1935,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 20235

var yyAct = [...]int16{
	276, 21, 1887, 538, 1666, 1709, 1888, 1623, 1626, 1770,
	715, 1669, 1742, 1056, 1732, 1753, 1512, 617, 3, 540,
	785, 1539, 1174, 254, 1577, 1194, 618, 292, 281, 527,
	271, 943, 308, 1362, 1516, 91, 1578, 1197, 91, 831,
	53, 1161, 961, 491, 1392, 1363, 1529, 280, 1268, 981,
	1220, 686, 1359, 1048, 1125, 1064, 1226, 258, 987, 1065,
	1002, 248, 91, 91, 361, 253, 361, 1179, 944, 356,
	361, 1787, 684, 361, 361, 91, 1334, 599, 1031, 880,
	91, 791, 91, 1115, 913, 66, 1121, 702, 91, 1043,
	1253, 284, 1166, 352, 908, 931, 546, 857, 701, 488,
	997, 940, 342, 337, 349, 249, 250, 251, 252, 552,
	673, 688, 1097, 263, 279, 722, 717, 560, 716, 641,
	497, 1330, 714, 575, 576, 577, 578, 579, 580, 581,
	574, 1237, 346, 584, 335, 907, 1914, 88, 1517, 1518,
	1519, 1520, 1521, 1522, 267, 52, 911, 336, 1880, 1015,
	600, 1419, 260, 340, 48, 26, 27, 1399, 1018, 584,
	1743, 344, 492, 493, 1948, 345, 1680, 1545, 1406, 1871,
	273, 632, 1852, 1496, 539, 574, 28, 502, 584, 1405,
	1553, 1941, 506, 1778, 507, 1805, 1806, 1713, 1714, 1926,
	514, 1864, 499, 1057, 1700, 1823, 503, 1122, 1123, 573,
	572, 582, 583, 575, 576, 577, 578, 579, 580, 581,
	574, 1175, 539, 584, 1118, 573, 572, 582, 583, 575,
	576, 577, 578, 579, 580, 581, 574, 91, 1851, 584,
	1218, 361, 361, 361, 361, 1354, 361, 577, 578, 579,
	580, 581, 574, 361, 1777, 584, 1017, 1802, 1500, 504,
	1386, 1387, 1385, 573, 572, 582, 583, 575, 576, 577,
	578, 579, 580, 581, 574, 1187, 974, 584, 1186, 535,
	361, 1188, 975, 976, 822, 1479, 1686, 549, 86, 82,
	83, 823, 84, 568, 1478, 571, 1685, 703, 1410, 704,
	1477, 586, 587, 588, 589, 590, 591, 592, 548, 569,
	570, 567, 593, 594, 595, 596, 573, 572, 582, 583,
	575, 576, 577, 578, 579, 580, 581, 574, 1497, 1239,
	584, 1020, 1231, 613, 1233, 1232, 1664, 1600, 1022, 516,
	1032, 1681, 1682, 1684, 1022, 91, 1494, 1683, 1120, 520,
	935, 1489, 91, 91, 91, 1328, 1327, 1870, 361, 1872,
	1326, 1044, 1487, 247, 1922, 361, 572, 582, 583, 575,
	576, 577, 578, 579, 580, 581, 574, 585, 1946, 584,
	601, 1400, 492, 493, 1842, 1939, 1938, 352, 573, 572,
	582, 583, 575, 576, 577, 578, 579, 580, 581, 574,
	1493, 1923, 584, 585, 1758, 573, 572, 582, 583, 575,
	576, 577, 578, 579, 580, 581, 574, 522, 1893, 584,
	524, 1885, 585, 1748, 793, 1329, 1668, 1453, 1454, 1701,
	1642, 573, 572, 582, 583, 575, 576, 577, 578, 579,
	580, 581, 574, 340, 1733, 584, 1772, 668, 1924, 521,
	523, 531, 532, 1940, 646, 647, 692, 585, 1863, 1807,
	49, 85, 1714, 1554, 1771, 1306, 605, 606, 607, 608,
	609, 610, 611, 585, 1015, 1408, 941, 573, 572, 582,
	583, 575, 576, 577, 578, 579, 580, 581, 574, 585,
	699, 584, 1608, 1547, 1546, 1542, 1004, 1212, 1211, 1199,
	361, 361, 1919, 634, 635, 636, 637, 638, 639, 640,
	1011, 585, 1000, 1032, 91, 693, 91, 361, 1001, 91,
	1776, 1025, 91, 1045, 1593, 1204, 91, 1459, 361, 361,
	361, 361, 361, 361, 361, 361, 998, 1892, 1398, 1469,
	1303, 898, 361, 361, 1460, 1691, 1537, 91, 1537, 1217,
	1901, 1202, 1945, 999, 498, 1811, 509, 1759, 1760, 1761,
	962, 964, 361, 835, 585, 79, 91, 80, 80, 1813,
	1584, 57, 361, 505, 801, 495, 1007, 494, 1003, 1012,
	793, 1178, 834, 1177, 794, 795, 1009, 1008, 1176, 519,
	1139, 782, 226, 1307, 1205, 810, 59, 60, 61, 62,
	63, 81, 1808, 1930, 854, 603, 604, 1705, 1509, 826,
	858, 999, 792, 585, 361, 361, 797, 1427, 798, 1315,
	998, 802, 361, 781, 805, 783, 784, 361, 1540, 1541,
	1543, 915, 917, 1138, 1143, 1109, 585, 999, 808, 829,
	963, 706, 1304, 616, 855, 1302, 564, 934, 918, 824,
	896, 910, 515, 585, 983, 982, 914, 297, 559, 1305,
	895, 557, 1092, 1435, 923, 925, 899, 1311, 843, 859,
	933, 1725, 1724, 1723, 836, 900, 901, 559, 91, 585,
	1722, 91, 91, 91, 91, 91, 1721, 853, 864, 851,
	897, 1720, 1719, 91, 603, 604, 91, 1717, 960, 1450,
	91, 1189, 862, 863, 861, 91, 91, 1164, 945, 361,
	1005, 886, 647, 918, 883, 885, 1006, 361, 1436, 832,
	833, 355, 705, 489, 361, 585, 1936, 496, 902, 905,
	500, 501, 1809, 1810, 1812, 1814, 1815, 1934, 352, 1356,
	794, 795, 1093, 1021, 1310, 1937, 980, 856, 929, 508,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 558, 557, 932, 937, 1013,
	1644, 1014, 340, 340, 340, 340, 340, 969, 919, 920,
	942, 932, 559, 1148, 928, 947, 948, 340, 950, 1196,
	1010, 1137, 1196, 361, 91, 91, 340, 788, 361, 1641,
	361, 91, 958, 91, 967, 554, 924, 361, 970, 972,
	91, 966, 91, 971, 1788, 91, 361, 1070, 1904, 936,
	1323, 938, 939, 985, 1033, 1034, 1035, 1036, 946, 828,
	1903, 949, 550, 1789, 511, 512, 513, 78, 1208, 558,
	557, 1640, 1050, 1869, 573, 572, 582, 583, 575, 576,
	577, 578, 579, 580, 581, 574, 559, 1868, 584, 1136,
	1627, 1135, 1867, 1196, 1099, 827, 1715, 558, 557, 854,
	558, 557, 1195, 1629, 1841, 1046, 1047, 1358, 558, 557,
	1403, 1790, 558, 557, 559, 539, 1207, 559, 355, 355,
	355, 355, 1786, 355, 1196, 559, 1054, 1055, 334, 559,
	355, 558, 557, 1063, 858, 1069, 50, 1565, 1119, 855,
	1240, 1240, 1087, 1865, 1088, 1654, 860, 1089, 559, 558,
	557, 1564, 1127, 361, 1129, 1240, 1573, 562, 1735, 847,
	849, 850, 1132, 1133, 1134, 848, 559, 1098, 1106, 1107,
	1108, 1572, 1144, 1415, 558, 557, 1628, 1150, 1260, 1258,
	1151, 1152, 1153, 1154, 1627, 1050, 1866, 881, 1718, 882,
	50, 559, 1607, 859, 1570, 615, 1126, 1629, 1158, 1111,
	1471, 1254, 1214, 615, 1746, 1953, 361, 1534, 1925, 91,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1402, 1046, 1047,
	675, 678, 679, 680, 676, 361, 677, 681, 1105, 1401,
	1167, 1168, 1206, 361, 1190, 355, 1615, 1911, 1534, 1876,
	1534, 1859, 708, 1059, 361, 1746, 1858, 1855, 1854, 1181,
	894, 1183, 807, 91, 1192, 582, 583, 575, 576, 577,
	578, 579, 580, 581, 574, 806, 1147, 584, 1847, 539,
	1628, 1534, 1844, 1112, 1113, 1114, 1213, 1534, 1843, 1615,
	1768, 1182, 1171, 1230, 1615, 1651, 1615, 539, 1618, 1617,
	1615, 1616, 539, 91, 361, 789, 1128, 787, 361, 517,
	340, 1184, 510, 1228, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1534, 1533, 1382, 539, 1875, 1145, 1508, 539, 1442,
	1441, 1247, 585, 1249, 1250, 1251, 1252, 1269, 1438, 1439,
	361, 1438, 1437, 91, 91, 1200, 1201, 1203, 1130, 539,
	1821, 91, 1241, 1242, 696, 1244, 1245, 1246, 916, 539,
	361, 670, 539, 1739, 1625, 1215, 23, 713, 712, 1747,
	1738, 1746, 1591, 1737, 1663, 1659, 1256, 1257, 1658, 1255,
	1655, 1566, 1332, 1275, 1556, 1259, 1428, 721, 721, 1320,
	1156, 1360, 1163, 1157, 1162, 697, 1272, 695, 23, 1273,
	54, 1274, 1162, 1273, 355, 1263, 1163, 1318, 1276, 916,
	361, 361, 1830, 50, 1142, 355, 355, 355, 355, 355,
	355, 355, 355, 1353, 968, 1610, 695, 1366, 23, 355,
	355, 1504, 669, 1381, 670, 945, 1355, 1534, 1361, 1130,
	1364, 945, 361, 670, 361, 50, 1322, 1555, 1162, 838,
	1130, 1449, 1370, 1316, 1331, 1321, 670, 1141, 1712, 562,
	1575, 1574, 355, 855, 1347, 1333, 1346, 1440, 973, 1130,
	698, 1390, 1383, 830, 1384, 50, 50, 1942, 1369, 260,
	1391, 1371, 1849, 1820, 573, 572, 582, 583, 575, 576,
	577, 578, 579, 580, 581, 574, 1741, 1740, 584, 1230,
	1404, 904, 904, 1729, 1728, 1688, 1687, 1665, 1653, 906,
	1594, 585, 91, 361, 355, 1426, 1022, 1409, 1049, 1228,
	1407, 1445, 1416, 91, 926, 1425, 50, 1423, 361, 926,
	361, 1412, 1377, 1447, 1448, 1116, 1375, 1324, 1325, 361,
	1044, 1429, 1430, 1219, 1432, 1433, 1434, 1261, 1262, 786,
	1418, 91, 1193, 1420, 1167, 1168, 842, 361, 1038, 1348,
	1349, 1350, 1351, 1352, 1037, 65, 361, 926, 1710, 91,
	1734, 1576, 1431, 1446, 1360, 1475, 1170, 804, 790, 536,
	1457, 955, 953, 1456, 1173, 1172, 956, 954, 1481, 957,
	1462, 679, 680, 952, 951, 1320, 355, 264, 265, 1464,
	1490, 1491, 1492, 1898, 355, 1495, 1850, 1314, 1094, 1473,
	1896, 489, 1104, 1467, 1443, 553, 1470, 1103, 1248, 1505,
	1506, 1507, 541, 1510, 711, 1455, 361, 518, 551, 361,
	361, 361, 91, 361, 542, 1480, 1414, 1502, 1886, 1595,
	361, 1474, 1061, 1485, 1511, 1523, 1524, 1525, 832, 833,
	803, 1413, 260, 1466, 48, 26, 27, 1528, 1271, 1266,
	340, 1265, 796, 361, 1503, 683, 1680, 553, 1544, 1530,
	361, 261, 262, 1102, 1915, 1563, 28, 1590, 361, 1552,
	1051, 1101, 1452, 1526, 1550, 355, 77, 355, 1397, 1586,
	255, 1587, 1588, 1589, 721, 1230, 1873, 91, 1694, 1549,
	361, 361, 256, 355, 1585, 54, 1693, 1567, 1598, 361,
	1023, 1024, 1026, 1027, 1028, 1228, 1029, 1030, 1557, 1163,
	361, 1838, 1837, 1579, 1836, 1835, 1954, 355, 555, 1269,
	1530, 1568, 585, 1039, 1040, 1041, 1727, 1042, 71, 75,
	1726, 68, 1804, 1803, 1476, 1396, 1395, 1583, 1582, 1066,
	1067, 1068, 1702, 1606, 72, 1210, 76, 825, 56, 361,
	361, 1675, 8, 1672, 7, 58, 1569, 1278, 1571, 1673,
	6, 1458, 73, 74, 69, 1611, 1686, 1619, 1620, 1621,
	1671, 5, 694, 51, 1, 361, 1685, 1364, 675, 678,
	679, 680, 676, 1124, 677, 681, 612, 361, 296, 1581,
	1609, 1921, 1891, 282, 1515, 1650, 269, 1831, 1751, 1826,
	562, 1757, 1599, 1736, 1216, 1639, 67, 1822, 1745, 1622,
	1643, 1451, 1270, 1287, 1058, 1638, 361, 91, 1267, 1637,
	1075, 1681, 1682, 1684, 1645, 361, 1769, 1683, 1783, 1624,
	1536, 1647, 990, 1679, 984, 361, 1191, 487, 1670, 1660,
	64, 1716, 1579, 991, 989, 1695, 1696, 1697, 1698, 988,
	986, 1689, 1016, 1180, 1238, 1019, 361, 720, 718, 1656,
	719, 1657, 723, 234, 347, 682, 707, 556, 1301, 1300,
	1704, 1071, 355, 1711, 1309, 821, 1091, 534, 236, 597,
	1198, 1100, 1185, 1364, 1703, 1708, 354, 1367, 545, 1692,
	1597, 1209, 1730, 1707, 1146, 629, 930, 283, 846, 295,
	294, 70, 293, 1235, 1601, 1602, 837, 1603, 1604, 1605,
	1155, 1679, 566, 339, 666, 674, 1749, 672, 671, 1662,
	1169, 361, 361, 361, 361, 1165, 338, 1317, 361, 361,
	1744, 1499, 1699, 1579, 841, 25, 55, 266, 19, 18,
	49, 1264, 17, 1775, 20, 355, 361, 16, 1780, 15,
	14, 361, 29, 13, 12, 361, 1762, 1765, 11, 10,
	1750, 1774, 1784, 9, 1766, 1767, 1678, 1677, 1676, 361,
	361, 945, 1674, 1798, 1779, 1801, 4, 355, 257, 22,
	2, 0, 361, 0, 0, 1800, 0, 361, 1796, 1797,
	1679, 0, 1816, 361, 0, 1827, 0, 355, 361, 1243,
	0, 0, 0, 1832, 1679, 1817, 1799, 0, 1579, 1839,
	0, 0, 361, 1846, 1829, 525, 0, 0, 1818, 0,
	0, 0, 0, 0, 1819, 0, 0, 0, 0, 1845,
	0, 355, 0, 1791, 1792, 1793, 1794, 1795, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 1368, 1180, 0,
	926, 0, 543, 547, 0, 0, 1860, 0, 0, 0,
	0, 361, 1856, 1857, 0, 1861, 1862, 1877, 0, 565,
	1679, 361, 0, 0, 1879, 1881, 0, 1878, 0, 355,
	0, 1393, 1679, 1679, 1679, 1890, 1883, 0, 1670, 1882,
	361, 0, 0, 1889, 361, 0, 1763, 1895, 1874, 1894,
	0, 0, 0, 0, 1900, 0, 619, 1902, 0, 1235,
	0, 0, 0, 0, 91, 630, 260, 0, 48, 26,
	27, 0, 1907, 1910, 1909, 361, 1897, 361, 0, 1679,
	1680, 1679, 1679, 0, 1918, 1832, 1749, 1918, 0, 0,
	28, 0, 91, 1927, 0, 0, 0, 0, 1929, 0,
	1444, 0, 0, 1931, 0, 0, 1932, 1908, 0, 0,
	1933, 1912, 0, 0, 0, 1461, 1140, 1463, 0, 0,
	0, 361, 0, 1935, 0, 0, 1465, 0, 0, 1944,
	1283, 0, 0, 361, 0, 0, 0, 1949, 1679, 1950,
	1920, 0, 1679, 0, 1468, 1955, 1956, 1918, 0, 1117,
	1943, 0, 0, 355, 0, 1422, 1424, 0, 573, 572,
	582, 583, 575, 576, 577, 578, 579, 580, 581, 574,
	0, 0, 584, 573, 572, 582, 583, 575, 576, 577,
	578, 579, 580, 581, 574, 0, 0, 584, 0, 0,
	1686, 0, 0, 0, 1928, 1293, 0, 528, 529, 530,
	1685, 533, 0, 0, 0, 1284, 1280, 1277, 537, 1285,
	1282, 1281, 0, 1513, 0, 76, 1513, 1513, 1513, 0,
	1527, 0, 0, 0, 0, 0, 1286, 355, 0, 0,
	0, 0, 642, 1279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1681, 1682, 1684, 0, 0,
	1513, 1683, 0, 0, 0, 1235, 0, 1558, 0, 1482,
	1483, 0, 1484, 0, 1294, 355, 1486, 644, 1488, 0,
	1296, 1289, 1290, 0, 1297, 1292, 1291, 0, 0, 0,
	1299, 1295, 0, 1580, 0, 0, 0, 355, 355, 0,
	0, 1298, 1081, 0, 0, 0, 1592, 0, 1288, 0,
	0, 309, 47, 0, 844, 845, 1080, 1596, 1951, 0,
	0, 0, 0, 0, 0, 0, 0, 1535, 1538, 0,
	0, 0, 0, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 1085, 887, 888, 0, 889, 890, 891,
	893, 892, 1079, 884, 645, 0, 1613, 1614, 0, 47,
	642, 0, 660, 643, 0, 0, 0, 259, 649, 648,
	0, 912, 0, 341, 49, 0, 0, 619, 0, 0,
	921, 922, 1393, 0, 0, 0, 544, 260, 0, 48,
	26, 27, 0, 0, 1646, 644, 0, 0, 0, 0,
	0, 1680, 0, 0, 0, 1076, 1073, 1074, 0, 1072,
	0, 28, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 89, 1580, 1661, 246, 0, 0, 0, 0, 0,
	0, 585, 1667, 0, 0, 0, 0, 0, 0, 1083,
	1086, 0, 1513, 0, 0, 661, 270, 0, 89, 89,
	0, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 89, 979, 1706, 0, 0, 89, 0, 89, 0,
	0, 0, 645, 0, 89, 0, 0, 0, 0, 0,
	660, 643, 800, 0, 0, 0, 649, 648, 0, 0,
	0, 0, 0, 811, 812, 813, 814, 815, 816, 817,
	818, 0, 0, 0, 0, 0, 0, 819, 820, 0,
	0, 1686, 0, 1580, 1535, 0, 0, 0, 0, 1078,
	0, 1685, 0, 0, 0, 0, 0, 0, 1752, 1754,
	1755, 1756, 0, 0, 0, 1393, 1393, 0, 0, 0,
	0, 0, 526, 526, 526, 526, 0, 526, 0, 0,
	926, 0, 1077, 1781, 526, 0, 0, 0, 1782, 0,
	0, 0, 1785, 661, 0, 0, 1681, 1682, 1684, 0,
	0, 47, 1683, 0, 0, 0, 1667, 1393, 1840, 260,
	0, 48, 26, 27, 1095, 1096, 598, 547, 1580, 1393,
	602, 0, 1082, 1680, 1824, 0, 0, 0, 0, 0,
	721, 0, 0, 28, 0, 1834, 0, 0, 1084, 614,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 1848,
	0, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	0, 631, 633, 633, 633, 633, 633, 633, 633, 633,
	0, 662, 663, 664, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 0, 23, 24, 48, 26, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 1131, 0, 42, 0, 0, 1884, 28,
	260, 0, 48, 26, 27, 49, 0, 0, 0, 1149,
	0, 0, 0, 0, 1680, 0, 0, 1393, 37, 0,
	0, 1899, 50, 1686, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 1685, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 89, 690,
	89, 0, 721, 0, 1916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1917, 0, 0, 0, 1681, 1682,
	1684, 0, 0, 1060, 1683, 1062, 30, 31, 33, 32,
	35, 0, 0, 0, 1335, 0, 0, 0, 355, 232,
	0, 1090, 260, 0, 48, 26, 27, 0, 0, 0,
	1667, 0, 36, 43, 44, 0, 1680, 45, 46, 34,
	0, 0, 0, 242, 1686, 0, 28, 0, 0, 1337,
	0, 0, 0, 0, 1685, 0, 0, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	526, 526, 526, 526, 526, 526, 526, 0, 0, 0,
	0, 0, 0, 526, 526, 0, 38, 39, 0, 40,
	41, 0, 0, 0, 0, 0, 0, 0, 227, 1681,
	1682, 1684, 0, 0, 229, 1683, 0, 0, 0, 0,
	0, 235, 231, 0, 0, 0, 0, 49, 0, 0,
	1339, 0, 0, 0, 1344, 0, 1338, 0, 0, 0,
	89, 1336, 89, 0, 0, 89, 0, 1342, 89, 0,
	0, 0, 809, 233, 0, 1357, 1686, 237, 0, 0,
	1340, 1341, 0, 0, 47, 0, 1685, 0, 0, 0,
	1372, 1373, 0, 89, 1374, 0, 0, 1376, 0, 0,
	1343, 1345, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 1388, 0, 0, 0,
	0, 809, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 1681, 1682, 1684, 0, 0, 0, 1683, 0, 0,
	0, 0, 0, 1828, 0, 0, 0, 0, 49, 228,
	0, 0, 341, 341, 341, 341, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 685, 0, 965,
	0, 270, 0, 0, 0, 0, 341, 0, 270, 270,
	0, 0, 0, 927, 270, 0, 0, 0, 927, 230,
	0, 238, 239, 240, 241, 245, 0, 0, 0, 0,
	244, 243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	270, 270, 270, 0, 89, 0, 927, 89, 89, 89,
	89, 89, 0, 0, 0, 1308, 0, 0, 1472, 959,
	0, 0, 89, 0, 0, 0, 690, 0, 0, 0,
	49, 89, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 526, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1110, 0, 1551, 0,
	89, 89, 0, 0, 0, 0, 0, 89, 0, 89,
	0, 0, 0, 0, 0, 0, 89, 0, 89, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1159, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 1648, 0, 0, 0, 0,
	1652, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 526, 1236, 0, 0, 0, 1731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 1764, 0, 0, 0, 0, 0, 0,
	1773, 619, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1365,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 1312,
	1313, 0, 0, 0, 0, 0, 0, 89, 1378, 1379,
	1380, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 1825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 1411, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 927, 0, 0, 0, 614, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 1913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 1548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1365, 0, 0, 1612,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1365, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1236, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 1853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 473, 462, 0, 423, 475, 393, 411, 483,
	413, 414, 449, 373, 432, 158, 408, 391, 95, 396,
	366, 403, 367, 394, 425, 119, 392, 464, 435, 133,
	481, 136, 440, 0, 180, 146, 0, 0, 427, 466,
	430, 457, 422, 450, 381, 439, 476, 409, 445, 477,
	0, 0, 0, 360, 0, 1531, 1532, 47, 0, 0,
	0, 0, 108, 0, 444, 471, 405, 486, 448, 365,
	442, 0, 371, 374, 482, 469, 400, 401, 0, 0,
	0, 0, 1947, 0, 0, 426, 431, 454, 419, 0,
	1906, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 397, 0, 438, 0, 0, 0, 378, 372, 0,
	424, 0, 0, 0, 380, 0, 398, 455, 89, 362,
	460, 467, 421, 142, 207, 470, 418, 417, 165, 0,
	111, 0, 186, 123, 410, 134, 452, 484, 474, 428,
	465, 395, 404, 113, 402, 172, 159, 198, 437, 160,
	170, 137, 190, 166, 197, 472, 208, 209, 188, 206,
	175, 103, 153, 93, 164, 171, 0, 112, 0, 219,
	220, 221, 222, 223, 224, 225, 370, 363, 399, 458,
	461, 385, 447, 375, 406, 453, 407, 429, 390, 0,
	0, 0, 0, 0, 96, 187, 196, 109, 176, 99,
	194, 183, 185, 144, 129, 130, 178, 97, 98, 0,
	169, 118, 163, 122, 117, 156, 184, 147, 191, 192,
	114, 216, 116, 115, 182, 104, 204, 205, 101, 105,
	203, 152, 157, 155, 202, 189, 195, 145, 141, 0,
	100, 193, 143, 140, 132, 0, 120, 124, 161, 139,
	162, 125, 149, 148, 150, 0, 0, 154, 126, 0,
	0, 0, 368, 0, 181, 200, 217, 218, 369, 389,
	468, 210, 211, 212, 213, 0, 0, 0, 151, 106,
	127, 177, 131, 138, 168, 215, 446, 173, 110, 199,
	179, 0, 384, 388, 382, 383, 433, 434, 478, 479,
	480, 456, 379, 0, 386, 387, 0, 463, 128, 436,
	94, 102, 135, 485, 214, 0, 167, 121, 201, 0,
	0, 412, 364, 416, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 174, 420, 415, 441, 443, 451, 459,
	473, 462, 107, 423, 475, 393, 411, 483, 413, 414,
	449, 373, 432, 158, 408, 391, 95, 396, 366, 403,
	367, 394, 425, 119, 392, 464, 435, 133, 481, 136,
	440, 0, 180, 146, 0, 0, 427, 466, 430, 457,
	422, 450, 381, 439, 476, 409, 445, 477, 0, 0,
	0, 275, 0, 92, 0, 0, 0, 0, 0, 0,
	108, 0, 444, 471, 405, 486, 448, 365, 442, 0,
	371, 374, 482, 469, 400, 401, 0, 0, 0, 0,
	0, 0, 0, 426, 431, 454, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 397,
	0, 438, 0, 0, 0, 378, 372, 0, 424, 0,
	0, 0, 380, 0, 398, 455, 0, 362, 460, 467,
	421, 142, 207, 470, 418, 417, 165, 0, 111, 0,
	186, 123, 410, 134, 452, 484, 474, 428, 465, 395,
	404, 113, 402, 172, 159, 198, 437, 160, 170, 137,
	190, 166, 197, 472, 208, 209, 188, 206, 175, 103,
	153, 93, 164, 171, 0, 112, 0, 219, 220, 221,
	222, 223, 224, 225, 370, 363, 399, 458, 461, 385,
	447, 375, 406, 453, 407, 429, 390, 0, 0, 0,
	0, 0, 96, 187, 196, 109, 176, 99, 194, 183,
	185, 144, 129, 130, 178, 97, 98, 0, 169, 118,
	163, 122, 117, 156, 184, 147, 191, 192, 114, 216,
	116, 115, 182, 104, 204, 205, 101, 105, 203, 152,
	157, 155, 202, 189, 195, 145, 141, 0, 100, 193,
	143, 140, 132, 0, 120, 124, 161, 139, 162, 125,
	149, 148, 150, 0, 0, 154, 126, 0, 0, 0,
	368, 0, 181, 200, 217, 218, 369, 389, 468, 210,
	211, 212, 213, 0, 0, 0, 151, 106, 127, 177,
	131, 138, 168, 215, 446, 173, 110, 199, 179, 0,
	384, 388, 382, 383, 433, 434, 478, 479, 480, 456,
	379, 0, 386, 387, 0, 463, 128, 436, 94, 102,
	135, 485, 214, 0, 167, 121, 201, 0, 0, 412,
	364, 416, 0, 0, 0, 0, 0, 0, 0, 376,
	377, 174, 420, 415, 441, 443, 451, 459, 473, 462,
	107, 423, 475, 393, 411, 483, 413, 414, 449, 373,
	432, 158, 408, 391, 95, 396, 366, 403, 367, 394,
	425, 119, 392, 464, 435, 133, 481, 136, 440, 0,
	180, 146, 0, 0, 427, 466, 430, 457, 422, 450,
	381, 439, 476, 409, 445, 477, 0, 0, 0, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	444, 471, 405, 486, 448, 365, 442, 0, 371, 374,
	482, 469, 400, 401, 1389, 0, 0, 0, 0, 0,
	0, 426, 431, 454, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 397, 0, 438,
	0, 0, 0, 378, 372, 0, 424, 0, 0, 0,
	380, 0, 398, 455, 0, 362, 460, 467, 421, 142,
	207, 470, 418, 417, 165, 0, 111, 0, 186, 123,
	410, 134, 452, 484, 474, 428, 465, 395, 404, 113,
	402, 172, 159, 198, 437, 160, 170, 137, 190, 166,
	197, 472, 208, 209, 188, 206, 175, 103, 153, 93,
	164, 171, 0, 112, 0, 219, 220, 221, 222, 223,
	224, 225, 370, 363, 399, 458, 461, 385, 447, 375,
	406, 453, 407, 429, 390, 0, 0, 0, 0, 0,
	96, 187, 196, 109, 176, 99, 194, 183, 185, 144,
	129, 130, 178, 97, 98, 0, 169, 118, 163, 122,
	117, 156, 184, 147, 191, 192, 114, 216, 116, 115,
	182, 104, 204, 205, 101, 105, 203, 152, 157, 155,
	202, 189, 195, 145, 141, 0, 100, 193, 143, 140,
	132, 0, 120, 124, 161, 139, 162, 125, 149, 148,
	150, 0, 0, 154, 126, 0, 0, 0, 368, 0,
	181, 200, 217, 218, 369, 389, 468, 210, 211, 212,
	213, 0, 0, 0, 151, 106, 127, 177, 131, 138,
	168, 215, 446, 173, 110, 199, 179, 0, 384, 388,
	382, 383, 433, 434, 478, 479, 480, 456, 379, 0,
	386, 387, 0, 463, 128, 436, 94, 102, 135, 485,
	214, 0, 167, 121, 201, 0, 0, 412, 364, 416,
	0, 0, 0, 0, 0, 0, 0, 376, 377, 174,
	420, 415, 441, 443, 451, 459, 473, 462, 107, 423,
	475, 393, 411, 483, 413, 414, 449, 373, 432, 158,
	408, 391, 95, 396, 366, 403, 367, 394, 425, 119,
	392, 464, 435, 133, 481, 136, 440, 0, 180, 146,
	0, 0, 427, 466, 430, 457, 422, 450, 381, 439,
	476, 409, 445, 477, 0, 0, 0, 275, 0, 92,
	0, 0, 0, 0, 0, 0, 108, 0, 444, 471,
	405, 486, 448, 365, 442, 0, 371, 374, 482, 469,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 426,
	431, 454, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 438, 0, 0,
	0, 378, 372, 0, 424, 0, 0, 0, 380, 0,
	398, 455, 0, 362, 460, 467, 421, 142, 207, 470,
	418, 417, 165, 0, 111, 0, 186, 123, 410, 134,
	452, 484, 474, 428, 465, 395, 404, 113, 402, 172,
	159, 198, 437, 160, 170, 137, 190, 166, 197, 472,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	370, 363, 399, 458, 461, 385, 447, 375, 406, 453,
	407, 429, 390, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 99, 194, 183, 185, 144, 129, 130,
	178, 97, 98, 0, 169, 118, 163, 122, 117, 156,
	184, 147, 191, 192, 114, 216, 116, 115, 182, 104,
	204, 205, 101, 105, 203, 152, 157, 155, 202, 189,
	195, 145, 141, 0, 100, 193, 143, 140, 132, 0,
	120, 124, 161, 139, 162, 125, 149, 148, 150, 0,
	0, 154, 126, 0, 0, 0, 368, 0, 181, 200,
	217, 218, 369, 389, 468, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	446, 173, 110, 199, 179, 0, 384, 388, 382, 383,
	433, 434, 478, 479, 480, 456, 379, 0, 386, 387,
	0, 463, 128, 436, 94, 102, 135, 485, 214, 0,
	167, 121, 201, 0, 0, 412, 364, 416, 0, 0,
	0, 0, 0, 0, 0, 376, 377, 174, 420, 415,
	441, 443, 451, 459, 473, 462, 107, 423, 475, 393,
	411, 483, 413, 414, 449, 373, 432, 158, 408, 391,
	95, 396, 366, 403, 367, 394, 425, 119, 392, 464,
	435, 133, 481, 136, 440, 0, 180, 146, 0, 0,
	427, 466, 430, 457, 422, 450, 381, 439, 476, 409,
	445, 477, 0, 0, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 444, 471, 405, 486,
	448, 365, 442, 0, 371, 374, 482, 469, 400, 401,
	0, 0, 0, 0, 0, 0, 0, 426, 431, 454,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1319, 0, 397, 0, 438, 0, 0, 0, 378,
	372, 0, 424, 0, 0, 0, 380, 0, 398, 455,
	0, 362, 460, 467, 421, 142, 207, 470, 418, 417,
	165, 0, 111, 0, 186, 123, 410, 134, 452, 484,
	474, 428, 465, 395, 404, 113, 402, 172, 159, 198,
	437, 160, 170, 137, 190, 166, 197, 472, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 370, 363,
	399, 458, 461, 385, 447, 375, 406, 453, 407, 429,
	390, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 368, 0, 181, 200, 217, 218,
	369, 389, 468, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 446, 173,
	110, 199, 179, 0, 384, 388, 382, 383, 433, 434,
	478, 479, 480, 456, 379, 0, 386, 387, 0, 463,
	128, 436, 94, 102, 135, 485, 214, 0, 167, 121,
	201, 0, 0, 412, 364, 416, 0, 0, 0, 0,
	0, 0, 0, 376, 377, 174, 420, 415, 441, 443,
	451, 459, 473, 462, 107, 423, 475, 393, 411, 483,
	413, 414, 449, 373, 432, 158, 408, 391, 95, 396,
	366, 403, 367, 394, 425, 119, 392, 464, 435, 133,
	481, 136, 440, 0, 180, 146, 0, 0, 427, 466,
	430, 457, 422, 450, 381, 439, 476, 409, 445, 477,
	50, 0, 0, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 444, 471, 405, 486, 448, 365,
	442, 0, 371, 374, 482, 469, 400, 401, 0, 0,
	0, 0, 0, 0, 0, 426, 431, 454, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 397, 0, 438, 0, 0, 0, 378, 372, 0,
	424, 0, 0, 0, 380, 0, 398, 455, 0, 362,
	460, 467, 421, 142, 207, 470, 418, 417, 165, 0,
	111, 0, 186, 123, 410, 134, 452, 484, 474, 428,
	465, 395, 404, 113, 402, 172, 159, 198, 437, 160,
	170, 137, 190, 166, 197, 472, 208, 209, 188, 206,
	175, 103, 153, 93, 164, 171, 0, 112, 0, 219,
	220, 221, 222, 223, 224, 225, 370, 363, 399, 458,
	461, 385, 447, 375, 406, 453, 407, 429, 390, 0,
	0, 0, 0, 0, 96, 187, 196, 109, 176, 99,
	194, 183, 185, 144, 129, 130, 178, 97, 98, 0,
	169, 118, 163, 122, 117, 156, 184, 147, 191, 192,
	114, 216, 116, 115, 182, 104, 204, 205, 101, 105,
	203, 152, 157, 155, 202, 189, 195, 145, 141, 0,
	100, 193, 143, 140, 132, 0, 120, 124, 161, 139,
	162, 125, 149, 148, 150, 0, 0, 154, 126, 0,
	0, 0, 368, 0, 181, 200, 217, 218, 369, 389,
	468, 210, 211, 212, 213, 0, 0, 0, 151, 106,
	127, 177, 131, 138, 168, 215, 446, 173, 110, 199,
	179, 0, 384, 388, 382, 383, 433, 434, 478, 479,
	480, 456, 379, 0, 386, 387, 0, 463, 128, 436,
	94, 102, 135, 485, 214, 0, 167, 121, 201, 0,
	0, 412, 364, 416, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 174, 420, 415, 441, 443, 451, 459,
	473, 462, 107, 423, 475, 393, 411, 483, 413, 414,
	449, 373, 432, 158, 408, 391, 95, 396, 366, 403,
	367, 394, 425, 119, 392, 464, 435, 133, 481, 136,
	440, 0, 180, 146, 0, 0, 427, 466, 430, 457,
	422, 450, 381, 439, 476, 409, 445, 477, 0, 0,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 444, 471, 405, 486, 448, 365, 442, 0,
	371, 374, 482, 469, 400, 401, 0, 0, 0, 0,
	0, 0, 0, 426, 431, 454, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	0, 438, 0, 0, 0, 378, 372, 0, 424, 0,
	0, 0, 380, 0, 398, 455, 0, 362, 460, 467,
	421, 142, 207, 470, 418, 417, 165, 0, 111, 0,
	186, 123, 410, 134, 452, 484, 474, 428, 465, 395,
	404, 113, 402, 172, 159, 198, 437, 160, 170, 137,
	190, 166, 197, 472, 208, 209, 188, 206, 175, 103,
	153, 93, 164, 171, 0, 112, 0, 219, 220, 221,
	222, 223, 224, 225, 370, 363, 399, 458, 461, 385,
	447, 375, 406, 453, 407, 429, 390, 0, 0, 0,
	0, 0, 96, 187, 196, 109, 176, 99, 194, 183,
	185, 144, 129, 130, 178, 97, 98, 0, 169, 118,
	163, 122, 117, 156, 184, 147, 191, 192, 114, 216,
	116, 115, 182, 104, 204, 205, 101, 358, 203, 152,
	157, 155, 202, 189, 195, 145, 141, 0, 100, 193,
	143, 140, 132, 0, 120, 124, 161, 139, 162, 125,
	149, 148, 150, 0, 0, 154, 126, 0, 0, 0,
	368, 0, 181, 200, 217, 218, 369, 389, 468, 210,
	211, 212, 213, 0, 0, 0, 359, 357, 127, 177,
	131, 138, 168, 215, 446, 173, 110, 199, 179, 353,
	384, 388, 382, 383, 433, 434, 478, 479, 480, 456,
	379, 0, 386, 387, 0, 463, 128, 436, 94, 102,
	135, 485, 214, 0, 167, 121, 201, 0, 0, 412,
	364, 416, 0, 0, 0, 0, 0, 0, 0, 376,
	377, 174, 420, 415, 441, 443, 451, 459, 473, 462,
	107, 423, 475, 393, 411, 483, 413, 414, 449, 373,
	432, 158, 408, 391, 95, 396, 366, 403, 367, 394,
	425, 119, 392, 464, 435, 133, 481, 136, 440, 0,
	180, 146, 0, 0, 427, 466, 430, 457, 422, 450,
	381, 439, 476, 409, 445, 477, 0, 0, 0, 90,
	0, 92, 0, 0, 0, 0, 0, 0, 108, 0,
	444, 471, 405, 486, 448, 365, 442, 0, 371, 374,
	482, 469, 400, 401, 0, 0, 0, 0, 0, 0,
	0, 426, 431, 454, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 397, 0, 438,
	0, 0, 0, 378, 372, 0, 424, 0, 0, 0,
	380, 0, 398, 455, 0, 362, 460, 467, 421, 142,
	207, 470, 418, 417, 165, 0, 111, 0, 186, 123,
	410, 134, 452, 484, 474, 428, 465, 395, 404, 113,
	402, 172, 159, 198, 437, 160, 170, 137, 190, 166,
	197, 472, 208, 209, 188, 206, 175, 103, 153, 93,
	164, 171, 0, 112, 0, 219, 220, 221, 222, 223,
	224, 225, 370, 363, 399, 458, 461, 385, 447, 375,
	406, 453, 407, 429, 390, 0, 0, 0, 0, 0,
	96, 187, 196, 109, 176, 99, 194, 183, 185, 144,
	129, 130, 178, 97, 98, 0, 169, 118, 163, 122,
	117, 156, 184, 147, 191, 192, 114, 216, 116, 115,
	182, 104, 204, 205, 101, 105, 203, 152, 157, 155,
	202, 189, 195, 145, 141, 0, 100, 193, 143, 140,
	132, 0, 120, 124, 161, 139, 162, 125, 149, 148,
	150, 0, 0, 154, 126, 0, 0, 0, 368, 0,
	181, 200, 217, 218, 369, 389, 468, 210, 211, 212,
	213, 0, 0, 0, 151, 106, 127, 177, 131, 138,
	168, 215, 446, 173, 110, 199, 179, 0, 384, 388,
	382, 383, 433, 434, 478, 479, 480, 456, 379, 0,
	386, 387, 0, 463, 128, 436, 94, 102, 135, 485,
	214, 0, 167, 121, 201, 0, 0, 412, 364, 416,
	0, 0, 0, 0, 0, 0, 0, 376, 377, 174,
	420, 415, 441, 443, 451, 459, 473, 462, 107, 423,
	475, 393, 411, 483, 413, 414, 449, 373, 432, 158,
	408, 391, 95, 396, 366, 403, 367, 394, 425, 119,
	392, 464, 435, 133, 481, 136, 440, 0, 180, 146,
	0, 0, 427, 466, 430, 457, 422, 450, 381, 439,
	476, 409, 445, 477, 0, 0, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 444, 471,
	405, 486, 448, 365, 442, 0, 371, 374, 482, 469,
	400, 401, 0, 0, 0, 0, 0, 0, 0, 426,
	431, 454, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 438, 0, 0,
	0, 378, 372, 0, 424, 0, 0, 0, 380, 0,
	398, 455, 0, 362, 460, 467, 421, 142, 207, 470,
	418, 417, 165, 0, 111, 0, 186, 123, 410, 134,
	452, 484, 474, 428, 465, 395, 404, 113, 402, 172,
	159, 198, 437, 160, 170, 137, 190, 166, 197, 472,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	370, 363, 399, 458, 461, 385, 447, 375, 406, 453,
	407, 429, 390, 0, 0, 0, 0, 0, 96, 187,
	700, 109, 176, 99, 194, 183, 185, 144, 129, 130,
	178, 97, 98, 0, 169, 118, 163, 122, 117, 156,
	184, 147, 191, 192, 114, 216, 116, 115, 182, 104,
	204, 205, 101, 358, 203, 152, 157, 155, 202, 189,
	195, 145, 141, 0, 100, 193, 143, 140, 132, 0,
	120, 124, 161, 139, 162, 125, 149, 148, 150, 0,
	0, 154, 126, 0, 0, 0, 368, 0, 181, 200,
	217, 218, 369, 389, 468, 210, 211, 212, 213, 0,
	0, 0, 359, 357, 127, 177, 131, 138, 168, 215,
	446, 173, 110, 199, 179, 353, 384, 388, 382, 383,
	433, 434, 478, 479, 480, 456, 379, 0, 386, 387,
	0, 463, 128, 436, 94, 102, 135, 485, 214, 0,
	167, 121, 201, 0, 0, 412, 364, 416, 0, 0,
	0, 0, 0, 0, 0, 376, 377, 174, 420, 415,
	441, 443, 451, 459, 473, 462, 107, 423, 475, 393,
	411, 483, 413, 414, 449, 373, 432, 158, 408, 391,
	95, 396, 366, 403, 367, 394, 425, 119, 392, 464,
	435, 133, 481, 136, 440, 0, 180, 146, 0, 0,
	427, 466, 430, 457, 422, 450, 381, 439, 476, 409,
	445, 477, 0, 0, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 444, 471, 405, 486,
	448, 365, 442, 0, 371, 374, 482, 469, 400, 401,
	0, 0, 0, 0, 0, 0, 0, 426, 431, 454,
	419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 0, 438, 0, 0, 0, 378,
	372, 0, 424, 0, 0, 0, 380, 0, 398, 455,
	0, 362, 460, 467, 421, 142, 207, 470, 418, 417,
	165, 0, 111, 0, 186, 123, 410, 134, 452, 484,
	474, 428, 465, 395, 404, 113, 402, 172, 159, 198,
	437, 160, 170, 137, 190, 166, 197, 472, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 370, 363,
	399, 458, 461, 385, 447, 375, 406, 453, 407, 429,
	390, 0, 0, 0, 0, 0, 96, 187, 348, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 358, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 368, 0, 181, 200, 217, 218,
	369, 389, 468, 210, 211, 212, 213, 0, 0, 0,
	359, 357, 351, 350, 131, 138, 168, 215, 446, 173,
	110, 199, 179, 353, 384, 388, 382, 383, 433, 434,
	478, 479, 480, 456, 379, 0, 386, 387, 0, 463,
	128, 436, 94, 102, 135, 485, 214, 0, 167, 121,
	201, 0, 0, 412, 364, 416, 0, 0, 0, 0,
	0, 0, 0, 376, 377, 174, 420, 415, 441, 443,
	451, 459, 473, 462, 107, 423, 475, 393, 411, 483,
	413, 414, 449, 373, 432, 158, 408, 391, 95, 396,
	366, 403, 367, 394, 425, 119, 392, 464, 435, 133,
	481, 136, 440, 0, 180, 146, 0, 0, 427, 466,
	430, 457, 422, 450, 381, 439, 476, 409, 445, 477,
	0, 0, 0, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 444, 471, 405, 486, 448, 365,
	442, 0, 371, 374, 482, 469, 400, 401, 0, 0,
	0, 0, 0, 0, 0, 426, 431, 454, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 397, 0, 438, 0, 0, 0, 378, 372, 0,
	424, 0, 0, 0, 380, 0, 398, 455, 0, 362,
	460, 467, 421, 142, 207, 470, 418, 417, 165, 0,
	111, 0, 186, 123, 410, 134, 452, 484, 474, 428,
	465, 395, 404, 113, 402, 172, 159, 198, 437, 160,
	170, 137, 190, 166, 197, 472, 208, 209, 188, 206,
	175, 103, 153, 93, 164, 171, 0, 112, 0, 219,
	220, 221, 222, 223, 224, 225, 370, 363, 399, 458,
	461, 385, 447, 375, 406, 453, 407, 429, 390, 0,
	0, 0, 0, 0, 96, 187, 196, 109, 176, 99,
	194, 183, 185, 144, 129, 130, 178, 97, 98, 0,
	169, 118, 163, 122, 117, 156, 184, 147, 191, 192,
	114, 216, 116, 115, 182, 104, 204, 205, 101, 105,
	203, 152, 157, 155, 202, 189, 195, 145, 141, 0,
	100, 193, 143, 140, 132, 0, 120, 124, 161, 139,
	162, 125, 149, 148, 150, 0, 0, 154, 126, 0,
	0, 0, 368, 0, 181, 200, 217, 218, 369, 389,
	468, 210, 211, 212, 213, 0, 0, 0, 151, 106,
	127, 177, 131, 138, 168, 215, 446, 173, 110, 199,
	179, 0, 384, 388, 382, 383, 433, 434, 478, 479,
	480, 456, 379, 0, 386, 387, 0, 463, 128, 436,
	94, 102, 135, 485, 214, 0, 167, 121, 201, 0,
	0, 412, 364, 416, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 174, 420, 415, 441, 443, 451, 459,
	158, 0, 107, 95, 0, 0, 278, 0, 0, 0,
	119, 274, 0, 0, 133, 319, 136, 0, 0, 180,
	146, 0, 0, 0, 0, 310, 311, 0, 0, 0,
	0, 0, 0, 977, 0, 50, 0, 0, 275, 298,
	277, 300, 301, 302, 303, 0, 0, 108, 299, 304,
	305, 306, 978, 0, 0, 272, 290, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 331, 0,
	289, 0, 0, 285, 286, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 207,
	0, 0, 329, 165, 0, 111, 0, 186, 123, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	172, 159, 198, 0, 160, 170, 137, 190, 166, 197,
	0, 208, 209, 188, 206, 175, 103, 153, 93, 164,
	171, 0, 112, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	187, 196, 109, 176, 99, 194, 183, 185, 144, 129,
	130, 178, 97, 98, 0, 169, 118, 163, 122, 117,
	156, 184, 147, 191, 192, 114, 216, 116, 115, 182,
	104, 204, 205, 101, 105, 203, 152, 157, 155, 202,
	189, 195, 145, 141, 0, 100, 193, 143, 140, 132,
	0, 120, 124, 161, 139, 162, 125, 149, 148, 150,
	333, 0, 154, 126, 0, 0, 0, 0, 0, 181,
	200, 217, 218, 0, 0, 0, 210, 211, 212, 213,
	0, 0, 0, 151, 106, 127, 177, 131, 138, 168,
	215, 0, 173, 110, 199, 179, 307, 320, 330, 326,
	327, 324, 325, 323, 322, 321, 332, 312, 313, 314,
	315, 317, 0, 128, 316, 94, 102, 135, 0, 214,
	0, 167, 121, 201, 0, 158, 0, 0, 95, 909,
	0, 278, 0, 0, 0, 119, 274, 0, 174, 133,
	319, 136, 0, 0, 180, 146, 328, 107, 0, 0,
	310, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 275, 298, 277, 300, 301, 302, 303,
	0, 0, 108, 299, 304, 305, 306, 0, 0, 0,
	272, 290, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 268,
	0, 0, 0, 331, 0, 289, 0, 0, 285, 286,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 207, 0, 0, 329, 165, 0,
	111, 0, 186, 123, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 172, 159, 198, 0, 160,
	170, 137, 190, 166, 197, 0, 208, 209, 188, 206,
	175, 103, 153, 93, 164, 171, 0, 112, 0, 219,
	220, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 187, 196, 109, 176, 99,
	194, 183, 185, 144, 129, 130, 178, 97, 98, 0,
	169, 118, 163, 122, 117, 156, 184, 147, 191, 192,
	114, 216, 116, 115, 182, 104, 204, 205, 101, 105,
	203, 152, 157, 155, 202, 189, 195, 145, 141, 0,
	100, 193, 143, 140, 132, 0, 120, 124, 161, 139,
	162, 125, 149, 148, 150, 333, 0, 154, 126, 0,
	0, 0, 0, 0, 181, 200, 217, 218, 0, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 151, 106,
	127, 177, 131, 138, 168, 215, 0, 173, 110, 199,
	179, 307, 320, 330, 326, 327, 324, 325, 323, 322,
	321, 332, 312, 313, 314, 315, 317, 0, 128, 316,
	94, 102, 135, 0, 214, 0, 167, 121, 201, 0,
	158, 0, 0, 95, 0, 0, 278, 0, 0, 0,
	119, 274, 0, 174, 133, 319, 136, 0, 0, 180,
	146, 328, 107, 0, 0, 310, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 539, 275, 298,
	277, 300, 301, 302, 303, 0, 0, 108, 299, 304,
	305, 306, 0, 0, 0, 272, 290, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 331, 0,
	289, 0, 0, 285, 286, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 207,
	0, 0, 329, 165, 0, 111, 0, 186, 123, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	172, 159, 198, 0, 160, 170, 137, 190, 166, 197,
	0, 208, 209, 188, 206, 175, 103, 153, 93, 164,
	171, 0, 112, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	187, 196, 109, 176, 99, 194, 183, 185, 144, 129,
	130, 178, 97, 98, 0, 169, 118, 163, 122, 117,
	156, 184, 147, 191, 192, 114, 216, 116, 115, 182,
	104, 204, 205, 101, 105, 203, 152, 157, 155, 202,
	189, 195, 145, 141, 0, 100, 193, 143, 140, 132,
	0, 120, 124, 161, 139, 162, 125, 149, 148, 150,
	333, 0, 154, 126, 0, 0, 0, 0, 0, 181,
	200, 217, 218, 0, 0, 0, 210, 211, 212, 213,
	0, 0, 0, 151, 106, 127, 177, 131, 138, 168,
	215, 0, 173, 110, 199, 179, 307, 320, 330, 326,
	327, 324, 325, 323, 322, 321, 332, 312, 313, 314,
	315, 317, 0, 128, 316, 94, 102, 135, 0, 214,
	0, 167, 121, 201, 0, 158, 0, 0, 95, 0,
	0, 278, 0, 0, 0, 119, 274, 0, 174, 133,
	319, 136, 0, 0, 180, 146, 328, 107, 0, 0,
	310, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 275, 298, 277, 300, 301, 302, 303,
	0, 0, 108, 299, 304, 305, 306, 0, 0, 0,
	272, 290, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 268,
	0, 0, 0, 331, 0, 289, 0, 0, 285, 286,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 207, 0, 0, 329, 165, 0,
	111, 0, 186, 123, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 172, 159, 198, 0, 160,
	170, 137, 190, 166, 197, 0, 208, 209, 188, 206,
	175, 103, 153, 93, 164, 171, 0, 112, 0, 219,
	220, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 187, 196, 109, 176, 99,
	194, 183, 185, 144, 129, 130, 178, 97, 98, 0,
	169, 118, 163, 122, 117, 156, 184, 147, 191, 192,
	114, 216, 116, 115, 182, 104, 204, 205, 101, 105,
	203, 152, 157, 155, 202, 189, 195, 145, 141, 0,
	100, 193, 143, 140, 132, 0, 120, 124, 161, 139,
	162, 125, 149, 148, 150, 333, 0, 154, 126, 0,
	0, 0, 0, 0, 181, 200, 217, 218, 0, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 151, 106,
	127, 177, 131, 138, 168, 215, 0, 173, 110, 199,
	179, 307, 320, 330, 326, 327, 324, 325, 323, 322,
	321, 332, 312, 313, 314, 315, 317, 0, 128, 316,
	94, 102, 135, 0, 214, 0, 167, 121, 201, 0,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 158, 0, 0, 95, 0, 0,
	278, 328, 107, 0, 119, 274, 0, 0, 133, 319,
	136, 0, 0, 180, 146, 0, 0, 0, 0, 310,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 275, 298, 277, 300, 301, 302, 303, 0,
	0, 108, 299, 304, 305, 306, 0, 0, 0, 272,
	290, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 331, 0, 289, 0, 0, 285, 286, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 207, 0, 0, 329, 165, 0, 111,
	0, 186, 123, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 172, 159, 198, 0, 160, 170,
	137, 190, 166, 197, 0, 208, 209, 188, 206, 175,
	103, 153, 93, 164, 171, 0, 112, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 187, 196, 109, 176, 99, 194,
	183, 185, 144, 129, 130, 178, 97, 98, 0, 169,
	118, 163, 122, 117, 156, 184, 147, 191, 192, 114,
	216, 116, 115, 182, 104, 204, 205, 101, 105, 203,
	152, 157, 155, 202, 189, 195, 145, 141, 0, 100,
	193, 143, 140, 132, 0, 120, 124, 161, 139, 162,
	125, 149, 148, 150, 333, 0, 154, 126, 0, 0,
	0, 0, 0, 181, 200, 217, 218, 0, 0, 0,
	210, 211, 212, 213, 0, 0, 0, 151, 106, 127,
	177, 131, 138, 168, 215, 0, 173, 110, 199, 179,
	307, 320, 330, 326, 327, 324, 325, 323, 322, 321,
	332, 312, 313, 314, 315, 317, 0, 128, 316, 94,
	102, 135, 0, 214, 0, 167, 121, 201, 0, 158,
	0, 0, 95, 0, 0, 278, 0, 0, 0, 119,
	274, 0, 174, 133, 319, 136, 0, 0, 180, 146,
	328, 107, 0, 0, 310, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 275, 298, 277,
	300, 301, 302, 303, 0, 0, 108, 299, 304, 305,
	306, 0, 0, 0, 272, 290, 0, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 331, 0, 289,
	0, 0, 285, 286, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 207, 0,
	0, 329, 165, 0, 111, 0, 186, 123, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 172,
	159, 198, 0, 160, 170, 137, 190, 166, 197, 0,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 99, 194, 183, 185, 144, 129, 130,
	178, 97, 98, 0, 169, 118, 163, 122, 117, 156,
	184, 147, 191, 192, 114, 216, 116, 115, 182, 104,
	204, 205, 101, 105, 203, 152, 157, 155, 202, 189,
	195, 145, 141, 0, 100, 193, 143, 140, 132, 0,
	120, 124, 161, 139, 162, 125, 149, 148, 150, 333,
	0, 154, 126, 0, 0, 0, 0, 0, 181, 200,
	217, 218, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	0, 173, 110, 199, 179, 307, 320, 330, 326, 327,
	324, 325, 323, 322, 321, 332, 312, 313, 314, 315,
	317, 0, 128, 316, 94, 102, 135, 0, 214, 0,
	167, 121, 201, 0, 158, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 174, 133, 319,
	136, 0, 0, 180, 146, 328, 107, 0, 0, 310,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 275, 298, 277, 300, 301, 302, 303, 0,
	0, 108, 299, 304, 305, 306, 0, 0, 0, 0,
	290, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 331, 0, 289, 0, 0, 285, 286, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 207, 0, 0, 329, 165, 0, 111,
	0, 186, 123, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 172, 159, 198, 1952, 160, 170,
	137, 190, 166, 197, 0, 208, 209, 188, 206, 175,
	103, 153, 93, 164, 171, 0, 112, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 187, 196, 109, 176, 99, 194,
	183, 185, 144, 129, 130, 178, 97, 98, 0, 169,
	118, 163, 122, 117, 156, 184, 147, 191, 192, 114,
	216, 116, 115, 182, 104, 204, 205, 101, 105, 203,
	152, 157, 155, 202, 189, 195, 145, 141, 0, 100,
	193, 143, 140, 132, 0, 120, 124, 161, 139, 162,
	125, 149, 148, 150, 333, 0, 154, 126, 0, 0,
	0, 0, 0, 181, 200, 217, 218, 0, 0, 0,
	210, 211, 212, 213, 0, 0, 0, 151, 106, 127,
	177, 131, 138, 168, 215, 0, 173, 110, 199, 179,
	307, 320, 330, 326, 327, 324, 325, 323, 322, 321,
	332, 312, 313, 314, 315, 317, 0, 128, 316, 94,
	102, 135, 0, 214, 0, 167, 121, 201, 0, 158,
	0, 0, 95, 0, 0, 278, 0, 0, 0, 119,
	0, 0, 174, 133, 319, 136, 0, 0, 180, 146,
	328, 107, 0, 0, 310, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 275, 298, 277,
	300, 301, 302, 303, 0, 0, 108, 299, 304, 305,
	306, 0, 0, 0, 0, 290, 0, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 331, 0, 289,
	0, 0, 285, 286, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 207, 0,
	0, 329, 165, 0, 111, 0, 186, 123, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 172,
	159, 198, 0, 160, 170, 137, 190, 166, 197, 0,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 99, 194, 183, 185, 144, 129, 130,
	178, 97, 98, 0, 169, 118, 163, 122, 117, 156,
	184, 147, 191, 192, 114, 216, 116, 115, 182, 104,
	204, 205, 101, 105, 203, 152, 157, 155, 202, 189,
	195, 145, 141, 0, 100, 193, 143, 140, 132, 0,
	120, 124, 161, 139, 162, 125, 149, 148, 150, 333,
	0, 154, 126, 0, 0, 0, 0, 0, 181, 200,
	217, 218, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	0, 173, 110, 199, 179, 307, 320, 330, 326, 327,
	324, 325, 323, 322, 321, 332, 312, 313, 314, 315,
	317, 0, 128, 316, 94, 102, 135, 0, 214, 0,
	167, 121, 201, 0, 158, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 174, 133, 319,
	136, 0, 0, 180, 146, 328, 107, 0, 0, 310,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 275, 298, 277, 300, 301, 302, 303, 0,
	0, 108, 299, 304, 305, 306, 0, 0, 0, 0,
	290, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 331, 0, 289, 0, 0, 285, 286, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 207, 0, 0, 329, 165, 0, 111,
	0, 186, 123, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 172, 159, 198, 0, 160, 170,
	137, 190, 166, 197, 0, 208, 209, 188, 206, 175,
	103, 153, 93, 164, 171, 0, 112, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 187, 196, 109, 176, 99, 194,
	183, 185, 144, 129, 130, 178, 97, 98, 0, 169,
	118, 163, 122, 117, 156, 184, 147, 191, 192, 114,
	216, 116, 115, 182, 104, 204, 205, 101, 105, 203,
	152, 157, 155, 202, 189, 195, 145, 141, 0, 100,
	193, 143, 140, 132, 0, 120, 124, 161, 139, 162,
	125, 149, 148, 150, 333, 0, 154, 126, 0, 0,
	0, 0, 0, 181, 200, 217, 218, 0, 0, 0,
	210, 211, 212, 213, 0, 0, 0, 151, 106, 127,
	177, 131, 138, 168, 215, 0, 173, 110, 199, 179,
	307, 320, 330, 326, 327, 324, 325, 323, 322, 321,
	332, 312, 313, 314, 315, 317, 0, 128, 316, 94,
	102, 135, 0, 214, 0, 167, 121, 201, 0, 158,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 174, 133, 0, 136, 0, 0, 180, 146,
	328, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 275, 0, 1222,
	1223, 1224, 0, 0, 0, 0, 108, 1227, 1225, 305,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 207, 0,
	0, 0, 165, 0, 111, 0, 186, 123, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 172,
	159, 198, 0, 160, 170, 137, 190, 166, 197, 0,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 99, 194, 183, 185, 144, 129, 130,
	178, 97, 98, 0, 169, 118, 163, 122, 117, 156,
	184, 147, 191, 192, 114, 216, 116, 115, 182, 104,
	204, 205, 101, 105, 203, 152, 157, 155, 202, 189,
	195, 145, 141, 0, 100, 193, 143, 140, 132, 0,
	120, 124, 161, 139, 162, 125, 149, 148, 150, 0,
	0, 1229, 1234, 0, 0, 0, 0, 0, 181, 200,
	217, 218, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	0, 173, 110, 199, 179, 0, 1231, 0, 1233, 1232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 94, 102, 135, 0, 214, 0,
	167, 121, 201, 0, 158, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 174, 133, 0,
	136, 0, 0, 180, 146, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1221,
	0, 0, 275, 0, 1222, 1223, 1224, 0, 0, 0,
	0, 108, 1227, 1225, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 207, 0, 0, 0, 165, 0, 111,
	0, 186, 123, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 172, 159, 198, 0, 160, 170,
	137, 190, 166, 197, 0, 208, 209, 188, 206, 175,
	103, 153, 93, 164, 171, 0, 112, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 187, 196, 109, 176, 99, 194,
	183, 185, 144, 129, 130, 178, 97, 98, 0, 169,
	118, 163, 122, 117, 156, 184, 147, 191, 192, 114,
	216, 116, 115, 182, 104, 204, 205, 101, 105, 203,
	152, 157, 155, 202, 189, 195, 145, 141, 0, 100,
	193, 143, 140, 132, 0, 120, 124, 161, 139, 162,
	125, 149, 148, 150, 0, 0, 1229, 1234, 0, 0,
	0, 0, 0, 181, 200, 217, 218, 0, 0, 0,
	210, 211, 212, 213, 0, 0, 0, 151, 106, 127,
	177, 131, 138, 168, 215, 0, 173, 110, 199, 179,
	0, 1231, 0, 1233, 1232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 94,
	102, 135, 0, 214, 0, 167, 121, 201, 0, 158,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 174, 133, 0, 136, 0, 0, 180, 146,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 0, 1222,
	1223, 1224, 0, 0, 0, 0, 108, 1227, 1225, 305,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 207, 0,
	0, 0, 165, 0, 111, 0, 186, 123, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 172,
	159, 198, 0, 160, 170, 137, 190, 166, 197, 0,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 99, 194, 183, 185, 144, 129, 130,
	178, 97, 98, 0, 169, 118, 163, 122, 117, 156,
	184, 147, 191, 192, 114, 216, 116, 115, 182, 104,
	204, 205, 101, 105, 203, 152, 157, 155, 202, 189,
	195, 145, 141, 0, 100, 193, 143, 140, 132, 0,
	120, 124, 161, 139, 162, 125, 149, 148, 150, 0,
	0, 1229, 1234, 0, 0, 0, 0, 0, 181, 200,
	217, 218, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	0, 173, 110, 199, 179, 0, 1231, 0, 1233, 1232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 94, 102, 135, 0, 214, 0,
	167, 121, 201, 0, 158, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 174, 133, 0,
	136, 0, 0, 180, 146, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 298, 903, 300, 301, 302, 303, 0,
	0, 108, 299, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 207, 0, 0, 0, 165, 0, 111,
	0, 186, 123, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 172, 159, 198, 0, 160, 170,
	137, 190, 166, 197, 0, 208, 209, 188, 206, 175,
	103, 153, 93, 164, 171, 0, 112, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 187, 196, 109, 176, 99, 194,
	183, 185, 144, 129, 130, 178, 97, 98, 0, 169,
	118, 163, 122, 117, 156, 184, 147, 191, 192, 114,
	216, 116, 115, 182, 104, 204, 205, 101, 105, 203,
	152, 157, 155, 202, 189, 195, 145, 141, 0, 100,
	193, 143, 140, 132, 0, 120, 124, 161, 139, 162,
	125, 149, 148, 150, 0, 0, 154, 126, 0, 0,
	0, 0, 0, 181, 200, 217, 218, 0, 0, 0,
	210, 211, 212, 213, 0, 0, 0, 151, 106, 127,
	177, 131, 138, 168, 215, 0, 173, 110, 199, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 94,
	102, 135, 0, 214, 0, 167, 121, 201, 0, 158,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 119,
	0, 747, 174, 133, 0, 136, 0, 0, 180, 146,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 207, 0,
	0, 0, 165, 0, 111, 0, 186, 123, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 172,
	159, 198, 0, 160, 170, 137, 190, 166, 197, 0,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 1833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 0, 774, 775, 163, 776, 777, 778,
	780, 779, 749, 750, 751, 755, 753, 752, 754, 726,
	728, 205, 724, 727, 733, 729, 730, 731, 745, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	746, 756, 757, 758, 759, 760, 761, 762, 763, 0,
	0, 154, 126, 0, 0, 0, 0, 0, 181, 200,
	217, 218, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	0, 173, 110, 199, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 94, 725, 135, 0, 214, 0,
	167, 121, 201, 0, 158, 0, 0, 95, 0, 561,
	0, 0, 0, 0, 119, 0, 0, 174, 133, 0,
	136, 0, 0, 180, 146, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 563, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 558, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 207, 0, 0, 0, 165, 0, 111,
	0, 186, 123, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 172, 159, 198, 0, 160, 170,
	137, 190, 166, 197, 0, 208, 209, 188, 206, 175,
	103, 153, 93, 164, 171, 0, 112, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 187, 196, 109, 176, 99, 194,
	183, 185, 144, 129, 130, 178, 97, 98, 0, 169,
	118, 163, 122, 117, 156, 184, 147, 191, 192, 114,
	216, 116, 115, 182, 104, 204, 205, 101, 105, 203,
	152, 157, 155, 202, 189, 195, 145, 141, 0, 100,
	193, 143, 140, 132, 0, 120, 124, 161, 139, 162,
	125, 149, 148, 150, 0, 0, 154, 126, 0, 0,
	0, 0, 0, 181, 200, 217, 218, 0, 0, 0,
	210, 211, 212, 213, 0, 0, 0, 151, 106, 127,
	177, 131, 138, 168, 215, 0, 173, 110, 199, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 94,
	102, 135, 0, 214, 0, 167, 121, 201, 0, 158,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 119,
	0, 747, 174, 133, 0, 136, 0, 0, 180, 146,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 207, 0,
	0, 0, 165, 0, 111, 0, 186, 123, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 172,
	159, 198, 0, 160, 170, 137, 190, 166, 197, 0,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 0, 774, 775, 163, 776, 777, 778,
	780, 779, 749, 750, 751, 755, 753, 752, 754, 726,
	728, 205, 724, 727, 733, 729, 730, 731, 745, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	746, 756, 757, 758, 759, 760, 761, 762, 763, 0,
	0, 154, 126, 0, 0, 0, 0, 0, 181, 200,
	217, 218, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	0, 173, 110, 199, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 94, 725, 135, 0, 214, 0,
	167, 121, 201, 0, 158, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 174, 133, 0,
	136, 0, 0, 180, 146, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 490, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 142, 207, 0, 0, 0, 993, 0, 992,
	0, 994, 995, 0, 134, 0, 0, 996, 999, 0,
	0, 0, 113, 0, 172, 159, 198, 0, 160, 170,
	137, 190, 166, 197, 0, 208, 209, 188, 206, 175,
	103, 153, 93, 164, 171, 0, 112, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 187, 196, 109, 176, 99, 194,
	183, 185, 144, 129, 130, 178, 97, 98, 0, 169,
	118, 163, 122, 117, 156, 184, 147, 191, 192, 114,
	216, 116, 115, 182, 104, 204, 205, 101, 105, 203,
	152, 157, 155, 202, 189, 195, 145, 141, 0, 100,
	193, 143, 140, 132, 0, 120, 124, 161, 139, 162,
	125, 149, 148, 150, 0, 0, 154, 126, 0, 0,
	0, 0, 0, 181, 200, 217, 218, 0, 0, 0,
	210, 211, 212, 213, 0, 0, 0, 151, 106, 127,
	177, 131, 138, 168, 215, 0, 173, 110, 199, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 94,
	102, 135, 0, 214, 0, 167, 121, 201, 0, 158,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 174, 133, 0, 136, 0, 0, 180, 146,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 207, 0,
	0, 0, 165, 0, 111, 0, 186, 123, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 172,
	159, 198, 0, 160, 170, 137, 190, 166, 197, 0,
	208, 209, 188, 206, 175, 103, 153, 93, 164, 171,
	0, 112, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 187,
	196, 109, 176, 99, 194, 183, 185, 144, 129, 130,
	178, 97, 98, 0, 169, 118, 163, 122, 117, 156,
	184, 147, 191, 1560, 114, 216, 116, 115, 182, 104,
	204, 205, 101, 1559, 203, 152, 157, 155, 202, 1561,
	195, 145, 141, 0, 100, 193, 143, 140, 1562, 901,
	120, 124, 161, 139, 162, 125, 149, 148, 150, 0,
	0, 154, 126, 897, 0, 0, 0, 0, 181, 200,
	217, 218, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 151, 106, 127, 177, 131, 138, 168, 215,
	0, 173, 110, 199, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 23, 94, 102, 135, 0, 214, 0,
	167, 121, 201, 0, 0, 158, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 119, 0, 174, 0, 133,
	0, 136, 0, 0, 180, 146, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 90, 0, 92, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 207, 0, 0, 0, 165, 0,
	111, 0, 186, 123, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 172, 159, 198, 0, 160,
	170, 137, 190, 166, 197, 0, 208, 209, 188, 206,
	175, 103, 153, 93, 164, 171, 0, 112, 0, 219,
	220, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 187, 196, 109, 176, 99,
	194, 183, 185, 144, 129, 130, 178, 97, 98, 0,
	169, 118, 163, 122, 117, 156, 184, 147, 191, 192,
	114, 216, 116, 115, 182, 104, 204, 205, 101, 105,
	203, 152, 157, 155, 202, 189, 195, 145, 141, 0,
	100, 193, 143, 140, 132, 0, 120, 124, 161, 139,
	162, 125, 149, 148, 150, 0, 0, 154, 126, 0,
	0, 0, 0, 0, 181, 200, 217, 218, 0, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 151, 106,
	127, 177, 131, 138, 168, 215, 0, 173, 110, 199,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	94, 102, 135, 0, 214, 0, 167, 121, 201, 0,
	158, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 174, 133, 0, 136, 0, 0, 180,
	146, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	92, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 207,
	0, 0, 0, 165, 0, 111, 0, 186, 123, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	172, 159, 198, 0, 160, 170, 137, 190, 166, 197,
	0, 208, 209, 188, 206, 175, 103, 153, 93, 164,
	171, 0, 112, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	187, 196, 109, 176, 99, 194, 183, 185, 144, 129,
	130, 178, 97, 98, 0, 169, 118, 163, 122, 117,
	156, 184, 147, 191, 192, 114, 216, 116, 115, 182,
	104, 204, 205, 101, 105, 203, 152, 157, 155, 202,
	189, 195, 145, 141, 0, 100, 193, 143, 140, 132,
	0, 120, 124, 161, 139, 162, 125, 149, 148, 150,
	0, 0, 154, 126, 0, 0, 0, 0, 0, 181,
	200, 217, 218, 0, 0, 0, 210, 211, 212, 213,
	0, 0, 0, 151, 106, 127, 177, 131, 138, 168,
	215, 0, 173, 110, 199, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 94, 102, 135, 0, 214,
	0, 167, 121, 201, 0, 0, 158, 0, 0, 95,
	0, 0, 0, 0, 0, 1905, 119, 0, 174, 0,
	133, 0, 136, 0, 0, 180, 146, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 92, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 207, 0, 0, 0, 165,
	0, 111, 0, 186, 123, 0, 134, 0, 0, 0,
	1394, 0, 0, 0, 113, 0, 172, 159, 198, 0,
	160, 170, 137, 190, 166, 197, 0, 208, 209, 188,
	206, 175, 103, 153, 93, 164, 171, 0, 112, 0,
	219, 220, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 187, 196, 109, 176,
	99, 194, 183, 185, 144, 129, 130, 178, 97, 98,
	0, 169, 118, 163, 122, 117, 156, 184, 147, 191,
	192, 114, 216, 116, 115, 182, 104, 204, 205, 101,
	105, 203, 152, 157, 155, 202, 189, 195, 145, 141,
	0, 100, 193, 143, 140, 132, 0, 120, 124, 161,
	139, 162, 125, 149, 148, 150, 0, 0, 154, 126,
	0, 0, 0, 0, 0, 181, 200, 217, 218, 0,
	0, 0, 210, 211, 212, 213, 0, 0, 0, 151,
	106, 127, 177, 131, 138, 168, 215, 0, 173, 110,
	199, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 94, 102, 135, 0, 214, 0, 167, 121, 201,
	0, 158, 0, 0, 95, 0, 689, 0, 0, 0,
	0, 119, 0, 0, 174, 133, 0, 136, 0, 0,
	180, 146, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 691, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	207, 0, 0, 0, 165, 0, 111, 0, 186, 123,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 172, 159, 198, 0, 160, 170, 137, 190, 166,
	197, 0, 208, 209, 188, 206, 175, 103, 153, 93,
	164, 171, 0, 112, 0, 219, 220, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 187, 196, 109, 176, 99, 194, 183, 185, 144,
	129, 130, 178, 97, 98, 0, 169, 118, 163, 122,
	117, 156, 184, 147, 191, 192, 114, 216, 116, 115,
	182, 104, 204, 205, 101, 105, 203, 152, 157, 155,
	202, 189, 195, 145, 141, 0, 100, 193, 143, 140,
	132, 0, 120, 124, 161, 139, 162, 125, 149, 148,
	150, 0, 0, 154, 126, 0, 0, 0, 0, 0,
	181, 200, 217, 218, 0, 0, 0, 210, 211, 212,
	213, 0, 0, 0, 151, 106, 127, 177, 131, 138,
	168, 215, 0, 173, 110, 199, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 94, 102, 135, 0,
	214, 0, 167, 121, 201, 0, 158, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 174,
	133, 0, 136, 0, 0, 180, 146, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 90, 0, 92, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 207, 0, 0, 0, 165,
	0, 111, 0, 186, 123, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 172, 159, 198, 0,
	160, 170, 137, 190, 166, 197, 0, 208, 209, 188,
	206, 175, 103, 153, 93, 164, 171, 0, 112, 0,
	219, 220, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 187, 196, 109, 176,
	99, 194, 183, 185, 144, 129, 130, 178, 97, 98,
	0, 169, 118, 163, 122, 117, 156, 184, 147, 191,
	192, 114, 216, 116, 115, 182, 104, 204, 205, 101,
	105, 203, 152, 157, 155, 202, 189, 195, 145, 141,
	0, 100, 193, 143, 140, 132, 0, 120, 124, 161,
	139, 162, 125, 149, 148, 150, 0, 0, 154, 126,
	0, 0, 0, 0, 0, 181, 200, 217, 218, 0,
	0, 0, 210, 211, 212, 213, 0, 0, 0, 151,
	106, 127, 177, 131, 138, 168, 215, 0, 173, 110,
	199, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	23, 94, 102, 135, 0, 214, 0, 167, 121, 201,
	0, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 0, 174, 0, 133, 0, 136, 0,
	0, 180, 146, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 0, 839, 0, 0, 840, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 92, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 799, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 710, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 709, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 689, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 691, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 687, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 667, 119, 0, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 92, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	343, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 92, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 92, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 92, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 1394, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 1514, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 92, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 691, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 585, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 563, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 158, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 174, 133, 0, 136, 0,
	0, 180, 146, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 490, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 207, 0, 0, 0, 165, 0, 111, 0, 186,
	123, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 172, 159, 198, 0, 160, 170, 137, 190,
	166, 197, 0, 208, 209, 188, 206, 175, 103, 153,
	93, 164, 171, 0, 112, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 187, 196, 109, 176, 99, 194, 183, 185,
	144, 129, 130, 178, 97, 98, 0, 169, 118, 163,
	122, 117, 156, 184, 147, 191, 192, 114, 216, 116,
	115, 182, 104, 204, 205, 101, 105, 203, 152, 157,
	155, 202, 189, 195, 145, 141, 0, 100, 193, 143,
	140, 132, 0, 120, 124, 161, 139, 162, 125, 149,
	148, 150, 0, 0, 154, 126, 0, 0, 0, 0,
	0, 181, 200, 217, 218, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 0, 151, 106, 127, 177, 131,
	138, 168, 215, 0, 173, 110, 199, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 94, 102, 135,
	0, 214, 0, 167, 121, 201, 0, 158, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	174, 133, 0, 136, 0, 0, 180, 146, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 207, 0, 0, 0,
	165, 0, 111, 0, 186, 123, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 172, 159, 198,
	0, 160, 170, 137, 190, 166, 197, 0, 208, 209,
	188, 206, 175, 103, 153, 93, 164, 171, 0, 112,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 187, 196, 109,
	176, 99, 194, 183, 185, 144, 129, 130, 178, 97,
	98, 0, 169, 118, 163, 122, 117, 156, 184, 147,
	191, 192, 114, 216, 116, 115, 182, 104, 204, 205,
	101, 105, 203, 152, 157, 155, 202, 189, 195, 145,
	141, 0, 100, 193, 143, 140, 132, 0, 120, 124,
	161, 139, 162, 125, 149, 148, 150, 0, 0, 154,
	126, 0, 0, 0, 0, 0, 181, 200, 217, 218,
	0, 0, 0, 210, 211, 212, 213, 0, 0, 0,
	151, 106, 127, 177, 131, 138, 168, 215, 0, 173,
	110, 199, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 94, 102, 135, 0, 214, 0, 167, 121,
	201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 107,
}

var yyPact = [...]int16{
	2449, -1000, -201, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1440, 1503, -1000, -1000, -1000, -1000, -1000, -1000, 1262,
	1365, 428, 467, 155, 17144, 458, 2547, 17449, -1000, 154,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1172, -1000, -1000,
	-1000, -1000, -1000, 1423, 1436, 1223, 1400, 1308, -1000, 8587,
	429, 14398, 16839, 7009, -1000, 19584, -172, 440, 438, 19889,
	414, 414, 19889, 19889, 17449, 414, -1000, -55, 439, 17449,
	-1000, 17449, 416, 1006, 416, 416, 416, 17449, -1000, 528,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17449, 1003, 1347, 283,
	5657, 5657, 5657, 5657, 280, 5657, -10, 1278, -1000, -1000,
	-1000, -1000, 5657, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 997, 1353, 9211, 9211, 1440, -1000, 1172,
	-1000, -1000, -1000, 1343, -1000, -1000, 731, 1467, -1000, 11956,
	522, -1000, 9211, 210, 1173, -1000, -1000, -194, 1173, -1000,
	-1000, 480, -1000, -1000, -1000, 10126, 10126, 10126, 10126, 10126,
	10126, 10126, -1000, -1000, -1000, -1000, 64, 897, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 519, -1000, 8906,
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 9211, 1173,
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 2049, 1173,
	1173, 1173, 1173, -1000, 16534, 1152, 1497, -1000, -1000, -1000,
	1392, 13177, 16229, 17449, 1093, -1000, 1166, 6671, 2, -1000,
	-1000, -1000, 631, 517, 15924, -1000, -1000, -1000, 1344, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1063, -1000, 12261,
	12261, 456, -1000, -1000, 414, 414, 1247, 1001, 714, 999,
	1277, 551, 1389, 17449, -1000, 15619, 5657, 436, 17449, 1376,
	1276, 17449, 969, 956, -1000, 6333, -1000, 5657, 5657, 5657,
	5657, 5657, 5657, 5657, 5657, -1000, -1000, -1000, -1000, -1000,
	-1000, 5657, 5657, -1000, 1, -1000, 17449, -1000, -1000, -1000,
	-1000, 1498, 508, 801, 515, 1169, -1000, 684, 1423, 997,
	1308, 15314, 1264, -1000, -1000, 17449, -1000, 9211, 9211, 852,
	-1000, 19279, -1000, -1000, 4305, 560, 10126, 843, 603, 10126,
	10126, 10126, 10126, 10126, 10126, 10126, 10126, 10126, 10126, 10126,
	10126, 10126, 10126, 10126, 891, 1931, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 954, -1000,
	418, -1000, 1172, 11346, 11346, 49, 49, 49, 49, 49,
	49, 18974, -1000, -212, 7977, -1000, 7347, 997, 1054, 838,
	8906, 8587, 8587, 9211, 9211, 10126, 18364, 8587, 1395, 680,
	838, 18364, -1000, 997, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8587, 8587, 8587, 8587, 314, 17449, -1000, 18364,
	14398, 14398, 14398, 14398, 14398, -1000, 1303, 1302, -1000, 1291,
	1290, 1298, 17449, -1000, 1057, 13177, 501, 1173, -1000, 18669,
	-1000, -1000, 314, 1122, 14398, 17449, -1000, -1000, 5995, 1166,
	2, 1164, -1000, -20, -16, 7672, 7347, 534, -1000, -1000,
	-1000, -1000, -1000, 12566, 435, -101, 53, -1000, -1000, -1000,
	-1000, -1000, 1213, -1000, -1000, -1000, 1213, 281, 1213, 1213,
	1213, -1000, 1213, 1213, 98, 98, 98, 98, 98, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1261, 1255, -1000, 1213,
	1213, 1213, -1000, 1213, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1237, 298, 1237, 1215, 1215, -1000,
	-1000, 435, 15009, 17449, 17449, -123, 947, 5657, 1368, 5657,
	17449, 1491, 17449, -1000, -1000, -1000, 12261, -1000, 2087, 17449,
	-1000, 17449, -1000, -1000, 17449, 5657, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 641, -1000, -1000, -1000, -1000, 1321, 9211, 9211, 4981,
	9211, -1000, -1000, -1000, 1353, -1000, 1395, 1412, -1000, 1334,
	1329, 8587, -1000, -1000, 560, 579, -1000, -1000, 861, -1000,
	-1000, -1000, -1000, 511, 1173, -1000, 325, -1000, -1000, -1000,
	-1000, 843, 10126, 10126, 10126, 1138, 325, 1887, 917, 259,
	49, 135, 135, 68, 68, 68, 68, 68, 23, 23,
	-1000, -1000, -1000, -1000, -102, -1000, 1213, 1237, 298, 1237,
	1215, 1215, -1000, -1000, 997, 108, -119, -1000, -1000, -1000,
	-1000, -1000, -1000, -194, 905, -1000, -1000, 898, 997, 8587,
	1054, 1165, 11956, -1000, -1000, -1000, 9211, -1000, 997, 1044,
	1044, 797, 758, 569, 1872, 1153, -1000, 510, 1044, 8587,
	694, -1000, 9211, 997, -1000, -1000, 1044, 997, 1044, 1044,
	1110, 1173, -1000, 1144, -1000, 616, 1497, 1253, 1275, 939,
	-1000, -1000, -1000, -1000, 1294, -1000, 1293, -1000, -1000, -1000,
	-1000, -105, 453, 448, 446, 19889, -1000, 1457, 14398, 1130,
	-1000, -1000, 1164, 2, -22, -1000, -1000, -1000, -1000, 838,
	610, -1000, -1000, 938, 7347, -1000, -1000, -1000, -1000, -1000,
	1249, 811, 19889, 347, 401, 485, 459, 936, -1000, -1000,
	-1000, 809, -1000, 19889, 1496, -1000, -1000, 346, -1000, 345,
	706, 904, 17449, 214, 1240, 10736, -1000, -217, -1000, 50,
	-1000, -1000, 841, 98, 98, 1213, 98, 98, 98, -1000,
	-1000, 534, 1338, 534, 534, 534, 534, 903, 903, -119,
	-119, -1000, -1000, -1000, 880, 1237, -1000, -1000, -1000, 879,
	-1000, 1246, 17449, 19889, 1388, 1386, -1000, 7347, -1000, -1000,
	-1000, -1000, -1000, 1385, 1095, -1000, -1000, -1000, -1000, 395,
	-1000, -1000, 1884, 1949, 507, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 303, 461, -1000, 5657,
	-1000, 645, 17449, 17449, 1319, 838, 838, 495, -1000, -1000,
	17449, -1000, -1000, -1000, -1000, 1146, -1000, -1000, -1000, 5319,
	8587, -1000, 1138, 325, 738, -1000, 10126, 10126, 129, -1000,
	-1000, -1000, 125, 124, 67, -1000, -194, -1000, 1044, -1000,
	8587, 838, -1000, -1000, -1000, 2463, 891, 2463, 10126, 10126,
	10126, 10126, 10126, 4981, -78, 1135, 649, -1000, 9211, 789,
	-1000, -1000, -1000, -1000, -1000, 1273, 18364, 1173, -1000, 14704,
	19889, 1440, 18364, 9211, 9211, -1000, -1000, 9211, 1233, -1000,
	9211, -1000, -1000, -1000, -1000, 1229, 1173, 1173, 1173, 1019,
	-1000, 1440, 1130, -1000, -1000, -1000, -35, -41, -1000, 9211,
	-1000, 4643, -1000, 17754, -1000, 1486, 1419, 391, 26, -1000,
	933, 921, -1000, 814, -1000, -1000, 38, -1000, -168, 120,
	27, -1000, -1000, 1173, -1000, 1228, 1378, -1000, 1357, 874,
	-1000, 10431, -193, -1000, -1000, -194, -1000, -1000, -1000, 1173,
	-1000, 1224, 1222, -1000, 1212, 1173, 493, -1000, -1000, -1000,
	1081, 534, 534, 98, 534, 534, 534, -1000, 597, -1000,
	-1000, -1000, -1000, 1037, -1000, 1034, -1000, -1000, 1163, -1000,
	1025, 17449, 19889, 1218, 1272, 1172, 1172, 1147, -1000, 608,
	1413, 250, 17449, 1491, 1491, -1000, 392, 19889, -1000, 19889,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19889, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	17449, -1000, -1000, -1000, -1000, -1000, 19889, 396, -1000, -1000,
	902, 9211, -1000, -1000, -1000, 7347, -1000, 1457, 14398, -1000,
	-1000, 997, -1000, 10126, 325, 325, 20, 14, 5, -1000,
	898, -1000, -1000, -1000, 997, 1213, 1213, -1000, 1213, 1215,
	-1000, -1000, 1213, 144, 1213, 133, 997, 997, 157, 371,
	282, 119, 299, -1000, 1173, -62, -1000, 838, 9211, -1000,
	1359, 1090, 1127, -1000, -1000, 8282, 997, 1023, 484, 1019,
	1423, -1000, 838, 838, 838, 18059, 838, -200, 18059, 18059,
	18059, 14093, 19889, 1423, -1000, -1000, -1000, -1000, 838, 3967,
	-1000, 1017, -1000, 275, 1213, 455, 455, -169, 342, 341,
	1173, -1000, -1000, -1000, -1000, -172, -1000, -1000, 706, -1000,
	1212, 9211, 18059, 127, -1000, 1143, 1079, 11041, -1000, 12871,
	-1000, 997, -1000, 856, -1000, 842, 1076, 7347, -1000, -1000,
	-1000, 534, -1000, -1000, -1000, -1000, -1000, 98, 896, 98,
	872, -1000, 857, 1158, 1270, 13788, 17449, -1000, -1000, 7347,
	3967, 432, 1433, -1000, -1000, 1408, -1000, 1099, 19889, -1000,
	-1000, 373, -1000, 1207, -1000, -1000, -1000, -1000, 1362, 19889,
	-1000, -1000, 838, 1445, 1139, -1000, 325, -1000, -1000, -1000,
	-1000, -1000, -1000, 271, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10126, 10126, -1000, 10126, 10126, 10126, 997,
	894, 838, 340, -1000, 1173, -1000, -1000, 1142, 19889, 19889,
	-1000, -1000, 996, -1000, -1000, 994, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 992, 992, 992, 501, -1000, -1000, -1000,
	-1000, -1000, -1000, 798, 17754, 1373, -1000, -1000, -1000, 780,
	-1000, -1000, 722, 254, 709, -1000, 19889, -172, 9211, -1000,
	1173, 820, 990, 9211, 1205, 846, -1000, 1075, -1000, 108,
	-119, -1000, -1000, -1000, -1000, -1000, -1000, 1173, -1000, 534,
	-1000, 534, 1073, 1070, 13788, 19889, 17449, 1069, 1133, -1000,
	273, 1204, -1000, -1000, 19889, -1000, -1000, -1000, -1000, -1000,
	235, 2373, 1203, 1202, 18059, 1173, 404, 1442, 1432, -1000,
	-1000, 157, 157, 157, 157, 103, -1000, -1000, 1493, -1000,
	1173, -1000, 1172, 483, -1000, 19889, -1000, -1000, -200, -1000,
	-1000, -1000, -105, 1267, 892, 134, -1000, 800, 606, 890,
	601, 600, 595, 589, 582, 581, 580, -1000, -1000, -1000,
	1481, -1000, -1000, -1000, 1476, 1201, -1000, 1200, 820, 9211,
	269, 1269, 863, -1000, 1068, 1065, -1000, -1000, -1000, -1000,
	1058, 1194, 1193, -177, 841, 13788, 1067, -1000, 231, 2373,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1440,
	19889, 19889, 19889, 19889, 359, 9821, 9211, 17754, 17754, 985,
	302, 294, -1000, 9211, 9211, -1000, -1000, -1000, -1000, 997,
	196, -136, 18364, 1127, 997, 19889, -1000, -1000, -1000, -1000,
	19889, -1000, -130, 892, 19889, -1000, 823, -1000, -1000, 753,
	812, 753, 753, 753, 753, 753, 455, 455, 19889, 17754,
	269, 820, -1000, -64, 1483, -137, 394, -1000, -1000, -177,
	13788, 17754, 1457, 1180, 1045, -121, 19889, 9211, 2576, -1000,
	1423, 1108, 11651, -1000, -1000, -1000, -1000, 19889, 1464, 1463,
	1461, 1460, 2181, 210, 786, 177, 983, 977, 1247, 974,
	-1000, 19889, 1179, 838, 1105, -1000, 1318, -87, -148, 1098,
	-1000, -1000, 1173, 953, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 706, 706, 951, 946,
	-1000, 269, -1000, 455, 455, -1000, -1000, -1000, 132, 887,
	793, 788, 774, 18, -1000, 1430, 1457, 1020, 944, 798,
	18059, -177, -1000, -197, -1000, 838, -1000, -1000, 2373, 1353,
	19889, 227, -1000, -1000, 1361, -1000, -1000, -1000, -1000, -1000,
	2373, 2373, 2373, -1000, 335, -123, -1000, 302, 1327, 17754,
	-1000, 1315, -1000, 19889, -1000, 892, -1000, -1000, 406, 798,
	-1000, -1000, -1000, 761, -1000, 749, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13482, 798, 1457, 798, 1267, 942, 1457,
	9211, -210, -1000, -1000, 12261, 1405, 19889, 2474, -1000, 146,
	1870, 161, -1000, 199, -1000, -1000, 284, 913, -127, 997,
	-1000, 17449, 1267, -1000, -1000, -1000, 479, 1267, 798, -1000,
	-1000, -1000, 798, 838, 647, 1172, -1000, -1000, -1000, 636,
	656, -1000, 181, -1000, 288, -1000, -138, -1000, 1174, -1000,
	7347, -1000, -1000, 1267, -1000, -1000, 412, 171, -1000, -1000,
	1173, -156, 19889, -1000, -1000, -1000, 2373, 9516, -1000, 910,
	1396, 157, 997, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1740, 17, 1, 1739, 1738, 1736, 1530, 1519, 1513,
	1511, 1732, 1728, 1727, 1726, 1723, 1719, 1718, 1714, 1713,
	1712, 1710, 1709, 1707, 1704, 1702, 1699, 1698, 561, 1697,
	1696, 1695, 109, 1694, 113, 1692, 1691, 83, 146, 94,
	84, 1556, 1687, 72, 147, 103, 1686, 92, 1685, 1680,
	161, 1678, 110, 1677, 1675, 102, 1674, 1673, 42, 41,
	30, 47, 1672, 1670, 114, 170, 1666, 1662, 1660, 27,
	1659, 1658, 97, 26, 33, 32, 45, 1657, 91, 28,
	1656, 95, 1655, 1654, 1650, 1649, 40, 1648, 96, 39,
	23, 19, 1647, 16, 12, 101, 67, 52, 31, 132,
	98, 1646, 68, 104, 87, 1642, 1641, 827, 1639, 1638,
	1637, 1636, 1635, 1634, 739, 120, 1631, 1629, 1628, 69,
	0, 647, 29, 117, 1627, 85, 1626, 2186, 112, 111,
	51, 1625, 61, 1775, 79, 1624, 1623, 76, 119, 10,
	116, 115, 1622, 118, 1620, 1618, 1617, 733, 56, 78,
	49, 1615, 1614, 1612, 86, 89, 53, 90, 99, 122,
	1610, 1609, 1604, 58, 1603, 21, 37, 4, 100, 1601,
	1600, 1597, 1596, 46, 1594, 1592, 44, 1590, 24, 36,
	5, 7, 8, 1589, 1588, 1586, 9, 1580, 48, 1578,
	13, 1574, 20, 1573, 1572, 1571, 77, 1568, 1567, 1566,
	14, 1564, 1563, 43, 25, 60, 50, 71, 81, 59,
	1561, 55, 11, 2, 6, 1559, 15, 1558, 1557, 1554,
	22, 34, 1553, 1552, 1551, 1548, 1546, 1543, 54, 1534,
	1533, 2111, 3, 1532, 1521, 1517, 1515, 171,
}

var yyR1 = [...]uint8{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 208,
	208, 208, 209, 209, 209, 211, 211, 212, 212, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 215, 215,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 198, 198, 125, 125, 192, 192, 191, 190, 190,
	189, 189, 188, 199, 199, 20, 170, 171, 171, 171,
	171, 171, 171, 171, 158, 158, 139, 139, 139, 139,
	139, 139, 139, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 205, 205,
	205, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 201, 201, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 148, 148, 148,
	148, 148, 148, 200, 200, 196, 196, 196, 196, 196,
	196, 196, 196, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 142, 142, 142, 142, 142,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	144, 140, 140, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 157, 157, 147, 147, 155, 155,
	156, 156, 156, 154, 154, 154, 151, 151, 152, 152,
	153, 153, 153, 149, 149, 149, 150, 150, 150, 160,
	181, 181, 181, 183, 183, 184, 184, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 169, 169,
	207, 207, 180, 180, 180, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 168, 168, 178, 178, 179, 179,
	176, 176, 176, 177, 163, 163, 163, 163, 163, 164,
	165, 165, 165, 165, 161, 162, 203, 203, 203, 204,
	204, 166, 166, 167, 167, 174, 174, 172, 172, 173,
	173, 173, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 234, 234, 235, 235,
	235, 235, 235, 235, 235, 187, 185, 185, 186, 186,
	17, 18, 18, 18, 18, 18, 19, 19, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 112, 112, 109, 109, 110, 110, 111, 111,
	111, 113, 113, 113, 136, 136, 136, 23, 23, 25,
	25, 26, 27, 24, 24, 24, 24, 24, 236, 28,
	29, 29, 30, 30, 30, 34, 34, 34, 32, 32,
	33, 33, 39, 39, 38, 38, 40, 40, 40, 40,
	124, 124, 124, 123, 123, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 220, 220, 219, 219, 221, 221,
	221, 221, 221, 221, 57, 57, 93, 93, 93, 96,
	96, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 131, 131, 130, 130, 130, 129, 129, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 94, 94,
	41, 41, 41, 41, 41, 41, 41, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 71, 71, 71, 71, 71, 71, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 37, 37,
	72, 72, 72, 78, 73, 73, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 69, 69, 69, 69, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 237, 237, 70, 70, 70, 70, 35, 35, 35,
	35, 35, 134, 134, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 138, 82, 82, 36, 36,
	80, 80, 81, 83, 83, 79, 79, 79, 222, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 66,
	66, 66, 84, 84, 85, 85, 86, 86, 87, 87,
	88, 89, 89, 89, 90, 90, 90, 90, 91, 91,
	91, 63, 63, 63, 63, 63, 63, 92, 92, 92,
	92, 97, 97, 74, 74, 76, 76, 75, 77, 98,
	98, 102, 99, 99, 103, 103, 103, 103, 103, 101,
	101, 101, 126, 126, 126, 106, 106, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 121, 121,
	122, 122, 127, 127, 127, 128, 128, 223, 223, 223,
	224, 224, 224, 225, 225, 226, 227, 227, 228, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 231, 232, 132,
	133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 4, 2,
	2, 3, 2, 3, 2, 7, 9, 3, 3, 6,
	9, 9, 8, 8, 5, 8, 7, 4, 2, 4,
	6, 2, 1, 1, 2, 1, 1, 1, 3, 3,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 2, 3, 4, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 5, 5, 8, 8, 13,
	1, 1, 2, 2, 10, 7, 0, 1, 1, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 2, 1,
	1, 1, 6, 11, 13, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 4, 5, 6, 4, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 3, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	117, 118, 120, 119, 150, 121, 143, 49, 197, 198,
	200, 201, 26, 144, 145, 148, 149, -231, 8, 304,
	53, -230, 346, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 126, 159,
	296, 123, 139, 157, 158, 124, 141, 71, -107, 127,
	129, 124, 124, 125, 127, 296, 123, 124, -55, -127,
	56, -120, 58, 166, 313, 21, 197, 210, 211, 202,
	243, 231, 314, 164, 228, 232, 282, 345, 65, 200,
	291, 133, 170, 146, 223, 226, 225, 217, 214, 28,
	249, 320, 216, 136, 250, 254, 261, 283, 311, 207,
	208, 285, 247, 32, 138, 315, 34, 154, 286, 252,
	246, 241, 126, 245, 206, 240, 38, 220, 256, 255,
	257, 281, 234, 165, 260, 236, 218, 235, 18, 149,
	152, 251, 253, 215, 167, 131, 156, 319, 287, 213,
	153, 168, 148, 290, 336, 163, 201, 284, 209, 293,
	37, 267, 227, 204, 219, 205, 135, 198, 161, 238,
	155, 221, 222, 244, 203, 239, 199, 157, 150, 292,
	268, 321, 237, 233, 229, 230, 162, 127, 159, 160,
	274, 275, 276, 277, 317, 288, 224, 269, 270, 172,
	173, 174, 175, 176, 177, 178, 124, 111, 232, 117,
	272, 125, 32, 156, -136, 124, -109, 160, 274, 275,
	276, 277, 56, 284, 283, 278, -127, 199, -132, -132,
	-132, -132, -132, -2, -90, 17, 16, -5, -3, -231,
	6, 21, 22, -34, 39, 40, -29, -40, 102, -41,
	-127, -60, 73, -65, 29, 56, -120, 58, 24, -64,
	-61, -79, -222, -77, -78, 111, 112, 100, 101, 108,
	74, 113, -69, -67, -68, -70, -225, -121, 57, 66,
	59, 60, 61, 62, 67, 68, 69, 294, -75, -231,
	43, 44, 305, 306, 307, 308, 312, 309, 76, 33,
	295, 303, 302, 301, 299, 300, 297, 298, 344, 130,
	296, 106, 304, 258, -107, -43, -44, -45, -46, -57,
	-78, -231, -55, 11, -50, -55, -99, -135, 199, -103,
	284, 283, -122, 294, -101, -121, -119, 282, 232, 281,
	56, -120, 122, 180, 325, 72, 23, 25, 265, 271,
	179, 75, 111, 16, 76, 186, 334, 335, 110, 305,
	117, 47, 297, 298, 295, 184, 307, 308, 296, 272,
	191, 20, 29, 10, 26, 144, 22, 104, 119, 181,
	79, 80, 147, 24, 145, 69, 187, 189, 19, 50,
	137, 11, 324, 13, 14, 338, 326, 130, 129, 91,
	337, 125, 45, 8, 113, 27, 88, 41, 142, 190,
	43, 89, 17, 299, 300, 31, 312, 151, 106, 48,
	35, 339, 73, 340, 67, 51, 289, 185, 71, 15,
	46, 341, 139, 188, 90, 120, 304, 44, 182, 342,
	123, 183, 6, 310, 30, 143, 42, 124, 273, 78,
	128, 68, 158, 5, 141, 9, 49, 52, 301, 302,
	303, 33, 77, 12, 140, 316, 70, -171, -158, -121,
	58, -203, 334, 335, 127, 127, -121, -115, 130, -115,
	-121, -121, -55, -115, 304, 124, -55, -55, -114, 130,
	56, -114, -114, -114, -55, 114, -55, 56, 30, 296,
	56, 156, 124, 157, 127, -133, -231, -122, -133, -133,
	-133, 161, 162, -133, -110, 279, 51, -133, -232, 55,
	-91, 19, 31, -41, -127, -87, -88, -41, -86, -2,
	-28, 35, -32, 22, 64, 11, -124, 72, 71, 88,
	-123, 23, -121, 58, 114, -41, -62, 91, 73, 89,
	90, 75, 97, 96, 107, 100, 101, 102, 103, 104,
	105, 106, 98, 99, 110, 344, 81, 82, 83, 84,
	85, 86, 87, 92, 93, 94, 95, -108, -231, -196,
	344, -78, -231, 115, 116, -65, -65, -65, -65, -65,
	-65, -65, -226, 259, -231, 58, 114, -2, -73, -41,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -82,
	-41, -231, -237, -231, -237, -237, -237, -237, -237, -237,
	-237, -138, 111, 232, 146, 223, -141, -140, 238, 237,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	231, 314, -231, -231, -231, -231, -56, 27, -55, 30,
	54, -51, -53, -52, -54, 41, 45, 47, 42, 43,
	44, 48, -131, 23, -43, -231, -130, 152, -129, 23,
	-127, 58, -55, -50, -233, 54, 11, 52, 54, -99,
	199, -100, -104, 285, 287, 81, 114, -126, -121, 58,
	29, 30, 55, 54, -159, -139, -143, -140, -145, -144,
	-146, -121, -141, -142, 231, 314, 228, 232, 229, 234,
	235, 236, 111, 233, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 237, 249, 30, 146, 221,
	222, 223, 226, 225, 227, 224, 250, 251, 252, 253,
	254, 255, 256, 257, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 213, 214, 216, 217, 218, 220,
	219, -159, 125, -115, -115, -192, 52, 56, 73, 56,
	51, -208, 51, 19, 179, 180, 23, -55, -55, 289,
	-133, 128, -55, 24, 51, -55, 56, 56, -128, -127,
	-119, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -112, 273, 280, -55, 9, 91, 54, 18, 114,
	54, -89, 25, 26, -90, -232, -34, -66, -121, 59,
	62, -33, 42, -55, -41, -41, -71, 67, 73, 68,
	69, -123, 102, -128, -122, -119, -65, -72, -75, -78,
	63, 91, 89, 90, 75, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-134, 56, 58, -143, 222, -138, -141, 213, 214, 216,
	217, 218, 220, 219, 56, 232, 222, 262, 113, 238,
	247, 248, -64, 58, -121, -64, -121, 347, -39, 22,
	-73, -38, -41, -40, -122, -232, 54, -232, -2, -38,
	-38, -41, -41, -79, -65, -79, -121, -127, -38, -32,
	-80, -81, 77, -79, -232, 230, -38, -39, -38, -38,
	-95, 152, -55, -98, -102, -79, -44, -45, -45, -44,
	-45, 41, 41, 41, 46, 41, 46, 41, -52, -127,
	-232, -58, 49, 129, 50, -231, -129, -95, 52, -43,
	-55, -103, -100, 54, 286, 288, 289, 51, 70, -41,
	-122, -150, 111, 110, -174, -158, -160, -163, -161, -162,
	-175, -164, 133, 131, 135, 136, 141, -168, 125, 142,
	67, 73, -205, 133, 51, 265, 271, 131, 142, 141,
	345, 65, 134, 324, 326, 29, -153, 347, 259, -151,
	268, -147, 53, -147, -147, 230, -147, -147, -147, -147,
	-147, -149, 232, -149, -149, -149, -149, 53, 53, -147,
	-147, -147, -147, -155, 53, 215, -155, -155, -156, 53,
	-156, -121, 51, 196, -55, -55, -190, 316, -191, 56,
	-133, 24, -133, -55, -211, -209, 8, 9, 10, -55,
	-139, -116, 122, 119, 120, -187, 118, 265, 232, 65,
	29, 15, 305, 152, 321, 56, 153, -55, -55, -55,
	-133, -111, 11, 91, 37, -41, -41, -128, -88, -91,
	-106, 19, 11, 33, 33, -38, 67, 68, 69, 114,
	-231, -72, -65, -65, -65, -37, 147, 72, 316, -232,
	230, -154, 316, 317, -227, -228, 58, -232, -38, -232,
	54, -41, -232, -232, -232, 54, 52, 23, 54, 11,
	54, 54, 11, 114, -232, -38, -83, -81, 79, -41,
	-232, -232, -232, -232, -232, -63, 30, 33, -2, -231,
	-231, -59, 54, 12, 81, -48, -47, 51, 52, -49,
	51, -47, 41, 41, -220, 316, 125, 125, 125, -96,
	-121, -59, -43, -59, -104, -105, 290, 287, 293, 81,
	56, -172, -122, 53, -204, 51, 73, -166, -121, 142,
	-168, -168, 56, -168, 56, 125, 56, 67, 19, -121,
	9, 142, 142, -204, 58, -55, -201, 325, 16, 53,
	-206, 53, 58, 59, 60, 67, -148, 66, -61, 260,
	-69, 295, 298, 297, 261, -121, -127, 348, -152, 269,
	59, -149, -149, -147, -149, -149, -149, -150, 30, -150,
	-150, -150, -150, -157, 58, -157, -154, -154, 59, -155,
	59, 51, 52, -55, -121, 23, 23, -189, -188, -122,
	-194, 23, 51, 54, -208, -132, -125, 133, -235, 159,
	132, 137, 136, 56, 131, 135, 152, -193, 159, 132,
	133, 137, 136, 56, 125, 142, 131, 135, 152, 141,
	-117, -118, 128, 23, 125, 142, 152, 122, -133, -113,
	89, 12, -127, -127, 38, 114, -55, -42, 11, 102,
	-122, -39, -37, 72, -65, -65, 221, 221, 221, 348,
	54, -196, -232, -40, -137, 111, 228, 146, 223, 217,
	247, 248, 234, 267, 221, 268, -134, -137, -65, -65,
	-65, -65, -65, -122, 313, -86, 80, -41, 78, -97,
	51, -98, -74, -76, -75, -231, -2, -92, -121, -96,
	-86, -102, -41, -41, -41, 53, -41, 53, -231, -231,
	-231, -232, 54, -86, -59, 287, 291, 292, -41, 81,
	-122, -179, -176, -121, 142, 10, 9, 19, 137, 131,
	345, 56, 56, 56, -203, 141, 336, -205, 345, -148,
	261, -231, 53, 23, 29, 59, -206, 53, -196, 344,
	-196, -231, -147, 53, -147, 53, 53, 114, 55, -150,
	-150, -149, -150, -150, -150, 56, 111, 55, 54, 55,
	54, 55, 54, -55, -121, 53, 51, -2, -2, 54,
	81, -195, 19, 167, 168, -55, -209, -211, -234, 125,
	142, -121, -132, -121, -132, -121, -55, -132, -121, 133,
	-163, 58, -41, -59, -43, -232, -65, 270, 270, 270,
	-228, -232, -147, -147, -147, -156, -147, 208, -147, 208,
	-232, -232, -232, 19, 54, -232, 54, 19, -231, -36,
	310, -41, 28, -97, 54, -232, -232, -232, 54, 114,
	-232, -90, -93, -121, 142, -219, -221, 338, 339, 340,
	341, 342, 343, -93, -93, -93, -130, -121, -90, -173,
	-122, 58, 59, 55, 54, -147, -177, 263, -147, -165,
	163, 164, 30, 165, -165, 336, 142, 142, -231, -203,
	-204, -41, -93, 53, 326, 54, 55, -206, -121, 232,
	222, 238, 247, -232, 55, 55, 55, -122, -150, -149,
	58, -149, 59, 59, 53, 52, 51, -178, -179, -69,
	-121, -55, -188, -173, 128, 21, 6, 8, 9, 10,
	19, 23, -121, 141, 53, 27, -121, -84, 13, -149,
	56, -65, -65, -65, -65, -65, -232, 58, 142, -76,
	33, -2, -231, -121, -121, 54, 55, 55, 54, -232,
	-232, -232, -58, -181, -183, 316, -182, 52, 138, 65,
	172, 173, 174, 175, 176, 177, 178, -176, -89, -204,
	51, 67, 166, -204, 51, -166, -121, -203, -41, -231,
	-232, 55, -41, 53, 59, 55, -150, -150, 55, 55,
	-178, -121, -55, 55, 53, 53, -167, -121, 181, -212,
	-214, -7, -9, -8, -11, -10, -12, -13, -14, -3,
	20, 185, 186, 191, 187, 140, 130, 53, 53, -93,
	-231, 131, -85, 14, 16, -232, -232, -232, -232, -35,
	91, 316, 9, -74, -2, 114, -121, -221, -220, -180,
	51, -182, 316, 53, 318, 56, -169, 81, 58, 81,
	81, 81, 81, 81, 81, 81, 9, 10, 53, 53,
	-232, -41, -200, 165, 51, 55, -202, 55, 55, 55,
	53, 53, -94, 337, -178, -197, 54, 52, 182, -214,
	-86, -217, -121, -216, -121, -121, -121, -210, 35, 188,
	189, 190, -60, -65, -41, -60, -179, -179, 55, -185,
	-186, 152, 142, -41, -73, -232, 314, 48, 319, -98,
	-232, -121, -121, -184, -182, -121, 59, -207, 51, 70,
	59, -207, -207, -207, -207, -207, -165, -165, -167, -179,
	-200, -232, 311, 10, 9, 322, 323, 55, 198, 328,
	329, 151, 330, 165, 331, 332, -94, -178, -179, -59,
	53, 55, -198, 316, -121, -41, -215, -214, 197, -90,
	54, -218, -139, 183, -121, 11, 11, 11, 11, -214,
	197, 78, 197, 55, 55, -192, -232, 54, -121, 53,
	38, 315, 320, -231, 55, 54, -204, -204, 55, 55,
	-200, -165, -165, 316, 59, 16, 59, 59, 59, 59,
	329, 151, 331, 16, -59, 55, 55, -181, -93, -94,
	345, -214, -91, -216, -121, 184, 27, -213, -214, -212,
	-213, -223, 192, 73, -190, -186, 33, -179, 38, -121,
	-182, 134, -181, 59, 59, 333, -127, -181, -59, -181,
	-180, 55, -59, -41, 346, 19, -121, 80, -214, 346,
	80, -224, 193, 192, 154, 55, 316, -232, -55, -180,
	114, -180, -181, -181, 80, -2, 80, 79, 195, 194,
	155, 319, 53, -122, -180, 130, 197, -231, 320, -167,
	-213, -65, 151, 55, 80, -232, -232,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 756, 0, 488, 488, 488, 488, 488, 488, 0,
	-2, 811, 0, 0, 0, 0, -2, 478, 479, 0,
	481, 482, 1109, 1109, 1109, 1109, 1109, 0, 33, 34,
	1107, 1, 3, 764, 0, 0, 492, 495, 490, 843,
	811, 0, 0, 0, 84, 147, 376, 0, 0, 0,
	809, 809, 0, 0, 0, 809, 134, 0, 0, 0,
	812, 0, 807, 0, 807, 807, 807, 0, 437, 570,
	832, 833, 834, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 0, 0, 0, 0,
	1110, 1110, 1110, 1110, 0, 1110, 466, 455, 457, 458,
	459, 460, 1110, 475, 476, 465, 477, 480, 483, 484,
	485, 486, 487, 27, 768, 843, 843, 756, 29, 0,
	488, 493, 494, 498, 496, 497, 489, 0, 506, 510,
	0, 580, 843, 585, 587, -2, -2, -2, 0, 626,
	627, 628, 629, 630, 631, 843, 843, 843, 843, 843,
	843, 843, 658, 659, 660, 661, 0, 735, 742, 743,
	744, 745, 746, 747, 748, 589, 590, 0, 788, 843,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	691, 691, 691, 691, 691, 691, 691, 691, 0, 0,
	0, 0, 0, 844, 0, 0, 517, 519, 520, 521,
	551, 0, 553, 0, 0, 41, 45, 0, 1077, 792,
	-2, -2, 0, 0, 0, 830, 831, -2, 986, -2,
	828, 829, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 0, 148, 162,
	162, 0, 377, 378, 809, 809, 135, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 1110, 0, 0, 0,
	0, 0, 0, 0, 436, 0, 438, 1110, 1110, 1110,
	1110, 1110, 1110, 1110, 1110, 447, 1111, 1112, 448, 449,
	450, 1110, 1110, 452, 0, 467, 0, 461, 28, 1108,
	22, 0, 0, 765, 0, 757, 758, 761, 764, 27,
	495, 0, 500, 499, 491, 0, 507, 843, 843, 0,
	511, 0, 513, 514, 0, 583, 843, 0, 0, 843,
	843, 843, 843, 843, 843, 843, 843, 843, 843, 843,
	843, 843, 843, 843, 0, 0, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 586, 0, 740,
	0, 600, 0, 0, 0, 649, 650, 651, 652, 653,
	654, 655, 662, 0, -2, 741, 0, 27, 0, 624,
	843, 843, 843, 843, 843, 843, 0, 843, 498, 0,
	727, 0, 682, 0, 683, 684, 685, 686, 687, 688,
	689, 690, 718, 0, 720, 721, 722, 723, 724, 725,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	261, 262, 843, -2, 843, 843, 43, 0, 569, 0,
	0, 0, 0, 0, 0, 558, 0, 0, 561, 0,
	0, 0, 0, 552, 0, 0, 572, 1041, 554, 0,
	556, 557, -2, 0, 0, 0, 39, 40, 0, 46,
	1077, 48, 73, 0, 0, 843, 0, 316, 802, 803,
	804, 800, 385, 0, 154, 310, 306, 157, 158, 159,
	160, 161, 296, 234, 261, 262, 296, 296, 296, 296,
	296, 268, 296, 296, 313, 313, 313, 313, 313, 277,
	278, 279, 280, 281, 282, 283, 1001, 0, 253, 296,
	296, 296, 257, 296, 259, 260, 286, 287, 288, 289,
	290, 291, 292, 293, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 298, 298, 298, 300, 300, 251,
	252, 155, 0, 0, 0, 138, 0, 1110, 0, 1110,
	0, 0, 0, 99, 100, 101, 162, 145, 0, 0,
	403, 0, 431, 808, 0, 1110, 434, 435, 571, 835,
	836, 439, 440, 441, 442, 443, 444, 445, 446, 451,
	454, 468, 462, 463, 456, 769, 0, 843, 843, 0,
	843, 760, 762, 763, 768, 30, 498, 0, 749, 0,
	0, 843, 501, 25, 581, 582, 584, 601, 0, 603,
	605, 512, 508, 0, 736, -2, 591, 592, 620, 621,
	622, 0, 843, 843, 843, 618, 596, 0, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	646, 702, 703, 647, 0, 657, 296, 298, 298, 298,
	300, 300, 251, 252, 0, 0, 303, 228, 229, 230,
	231, 232, 644, 225, 0, 645, 656, 0, 0, 843,
	0, 503, 510, 504, 738, 623, 843, 787, 27, 0,
	0, 0, 0, 628, 0, 0, 735, 0, 0, 843,
	733, 730, 843, 0, 692, 719, 0, 0, 0, 0,
	0, 0, 568, 576, 789, 0, 518, 547, 549, 0,
	544, 559, 560, 562, 0, 564, 0, 566, 567, 522,
	523, 524, 0, 0, 0, 0, 555, 576, 0, 576,
	42, 793, 47, 0, 0, 76, 77, 794, 795, 796,
	0, 798, 317, 0, 146, 149, 150, 151, 152, 153,
	0, 379, -2, 1046, 1067, 1004, 0, 0, 354, 355,
	164, 0, 166, 0, 0, 169, 170, 0, 172, 174,
	379, 0, 0, 0, 0, 0, 163, 0, 312, 308,
	307, 233, 0, 313, 313, 296, 313, 313, 313, 270,
	271, 316, 0, 316, 316, 316, 316, 0, 0, 303,
	303, 256, 258, 245, 0, 298, 247, 248, 249, 0,
	250, 0, 0, 0, 0, 0, 92, 0, 136, 137,
	93, 810, 94, 120, 0, 105, 102, 103, 104, 0,
	98, 1109, 133, 0, 823, 404, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 0, 0, 430, 1110,
	433, 471, 0, 0, 0, 766, 767, 0, 759, 23,
	0, 805, 806, 750, 751, 515, 602, 604, 606, 0,
	-2, 593, 618, 597, 0, 594, 843, 843, 0, 588,
	226, 227, 0, 0, 0, 846, 225, 663, 0, 666,
	843, 625, -2, 667, 668, 0, 0, 0, 843, 843,
	843, 843, 843, 0, 0, 756, 0, 731, 843, 0,
	681, 693, 694, 695, 696, 781, 0, 0, -2, 0,
	0, 756, 0, 843, 843, 541, 548, 843, 0, 542,
	843, 543, 563, 565, 534, 0, 0, 0, 0, 0,
	539, 756, 576, 38, 74, 75, 0, 0, 81, 843,
	318, 0, 387, 0, 364, 0, 0, 0, 382, 345,
	0, 0, 348, 0, 350, -2, 376, 165, 0, 0,
	0, 171, 173, 0, 177, 178, 0, 201, 0, 0,
	188, 0, -2, 192, 193, 225, 195, 196, 197, 1035,
	200, 296, 296, 221, 1007, 0, 0, 311, 156, 309,
	0, 316, 316, 313, 316, 316, 316, 272, 0, 273,
	274, 275, 276, 0, 294, 0, 254, 255, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 139, 140, 0,
	123, 0, 0, 0, 0, 392, 0, 0, 1109, 0,
	418, 419, 420, 421, 422, 423, 424, 1109, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	0, 1109, 824, 825, 826, 827, 0, 0, 432, 453,
	0, 843, 469, 470, 770, 0, 24, 576, 0, 509,
	737, 0, 595, 843, 619, 598, 0, 0, 0, 845,
	0, 848, 664, 505, 0, 296, 296, 707, 296, 300,
	710, 711, 296, 713, 296, 716, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 728, 680, 734, 843, 31,
	0, 781, 771, 783, 785, 843, 27, 0, 777, 0,
	764, 790, 577, 791, 545, 0, 550, 0, 0, 0,
	0, 553, 0, 764, 37, 78, 79, 80, 797, 0,
	388, 0, 358, 296, 296, 0, 0, 0, 0, 0,
	0, 346, 347, 349, 352, 376, 187, 167, 379, 168,
	0, 843, 0, 0, 202, 0, 0, 0, 191, 0,
	194, 0, 217, 0, 219, 0, 0, 0, 297, 263,
	264, 316, 265, 266, 267, 314, 315, 313, 0, 313,
	0, 301, 0, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 0, 121, 122, 0, 106, 0, 0, 416,
	417, 0, 397, 0, 398, 400, 401, 402, 0, 381,
	396, 472, 473, 752, 516, 665, 599, 648, 304, 305,
	847, 669, 704, 313, 708, 709, 712, 714, 715, 717,
	671, 670, 672, 843, 843, 675, 843, 843, 843, 0,
	0, 732, 0, 32, 0, 786, -2, 0, 0, 0,
	44, 35, 0, 536, 537, 0, 526, 528, 529, 530,
	531, 532, 533, 0, 0, 0, 572, 540, 36, 386,
	389, 390, 391, 320, 0, 761, 362, 363, 361, 379,
	370, 371, 0, 0, 379, 380, 381, 376, 843, 353,
	0, 0, 0, 843, 184, 0, 189, 0, 199, 986,
	303, 230, 231, 198, 218, 220, 222, 0, 269, 316,
	295, 316, 0, 0, 0, 0, 0, 0, 356, 357,
	296, 0, 141, 142, 0, 124, 125, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 382, 754, 0, 705,
	706, 0, 0, 0, 0, 697, 679, 729, 0, 784,
	0, -2, 0, 779, 778, 0, 546, 525, 0, 573,
	574, 575, 524, 342, 321, 0, 323, 0, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 360, 365,
	0, 372, 373, 366, 0, 0, 382, 0, 0, 843,
	223, 179, 0, 203, 0, 0, 284, 285, 299, 302,
	0, 0, 0, 578, 1107, 0, 129, 383, 0, 97,
	107, 109, 110, 111, 112, 113, 114, 115, 116, 756,
	0, 0, 0, 0, 61, 843, 843, 0, 0, 0,
	0, 0, 26, 843, 843, 674, 673, 676, 677, 0,
	0, 0, 0, 774, 27, 0, 538, 527, 535, 319,
	0, 324, 0, 0, 0, 327, 0, 339, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	223, 0, 175, 0, 0, 0, 0, 186, 190, 578,
	0, 0, 576, 0, 0, 131, 0, 843, 0, 108,
	764, 49, -2, 51, 56, 57, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 0, 0, 135, 0,
	426, 0, 0, 755, 753, 678, 0, 0, 0, 782,
	-2, 780, 343, 0, 325, 330, 328, 331, 340, 341,
	332, 333, 334, 335, 336, 337, 379, 379, 0, 0,
	375, 223, 224, 0, 0, 182, 183, 185, 0, 0,
	0, 0, 0, 0, 214, 0, 576, 0, 0, 320,
	0, 578, 95, 0, 384, 130, 96, 118, 0, 768,
	0, 0, 53, 55, 59, 62, 63, 64, 65, 66,
	0, 0, 0, 393, 837, 138, 425, 0, 0, 0,
	698, 0, 701, 0, 322, 0, 367, 368, 0, 320,
	176, 180, 181, 0, 205, 0, 207, 208, 209, 210,
	211, 212, 213, 0, 320, 576, 320, 342, 0, 576,
	843, 0, 117, 52, 162, 0, 0, 0, 68, 0,
	0, 840, 838, 0, 399, 427, 0, 0, 699, 0,
	326, 0, 342, 204, 206, 215, 0, 342, 320, 88,
	86, 579, 320, 132, 0, 0, 60, 67, 69, 0,
	71, 395, 0, 839, 0, 394, 0, 344, 0, 374,
	0, 85, 89, 342, 119, -2, 0, 0, 841, 842,
	0, 0, 0, 216, 87, 70, 0, 843, 700, 0,
	0, 0, 0, 369, 72, 428, 429,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 105, 97, 3,
	53, 55, 102, 100, 54, 101, 114, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 346,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 347, 3, 348, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:385
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:390
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:391
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:395
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:418
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:426
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:430
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:436
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:443
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:453
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:459
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:463
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:470
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:482
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:494
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:498
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:504
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:518
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:523
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:524
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:528
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:532
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:537
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:541
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:551
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:555
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:559
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:565
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:569
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:582
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:586
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:592
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:614
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:621
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:628
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:636
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:646
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:662
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:668
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:675
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:685
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:689
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:696
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:705
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:713
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:724
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:728
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:742
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:748
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:752
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:756
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:766
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:770
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:776
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:781
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:801
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:842
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:858
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:874
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:882
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:890
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:898
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:902
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:906
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:918
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:929
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:940
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:966
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:970
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:974
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:980
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:984
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:990
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:994
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1000
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1011
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1023
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1030
		{
			yyVAL.bytes = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1034
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1043
		{
			yyVAL.bytes = nil
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1051
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1063
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1068
		{
			yyVAL.expr = nil
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1072
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1077
		{
			yyVAL.expr = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1081
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1086
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1090
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1095
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1099
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1105
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1110
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1115
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1121
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1126
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1132
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1137
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1141
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1147
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1154
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1160
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1164
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1173
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1177
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1181
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1185
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1191
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1196
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1202
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1213
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1218
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1224
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1236
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1241
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1246
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1251
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1256
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1261
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1266
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1271
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1276
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1281
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1286
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1291
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1300
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1310
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1315
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1320
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1327
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1334
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1342
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1347
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1353
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1359
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1365
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1371
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1378
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1382
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1386
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1392
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1400
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1404
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1408
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1412
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1416
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1420
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1424
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1428
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1443
		{
			yyVAL.sequence = &Sequence{}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1447
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1452
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1457
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1467
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1472
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1477
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1482
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1487
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1492
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1497
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1502
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1507
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1514
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1518
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1522
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1526
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1530
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1534
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1539
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1543
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1548
		{
			yyVAL.bytes = nil
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1561
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1833
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1838
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1843
		{
			yyVAL.optVal = nil
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1847
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1852
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1856
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1864
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1868
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1874
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1882
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1886
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1890
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1895
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1899
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1904
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1908
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1913
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1917
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1921
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1926
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1930
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1934
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1939
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1943
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1947
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1958
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1962
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1966
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1972
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1976
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1982
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1986
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1992
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1996
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2001
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2005
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2009
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2013
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2017
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2021
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2025
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2029
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2033
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2039
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2043
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2049
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2053
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2059
		{
			yyVAL.indexPartition = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2063
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2067
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2073
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2077
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2081
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2085
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2089
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2101
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2105
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2121
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2126
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2132
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2136
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2142
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2147
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2151
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2161
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2166
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2173
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 367:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2180
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 368:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2187
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 369:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2196
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2208
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2212
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2216
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2220
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 374:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2226
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2237
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2247
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2251
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2255
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2261
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2265
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2270
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2277
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2281
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2288
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2292
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2299
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2303
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2309
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2313
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2323
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2327
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 394:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2341
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 395:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2355
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2374
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2383
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2387
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2391
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2404
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2414
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 402:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2419
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2424
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2428
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2460
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2466
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2470
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 428:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2476
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 429:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2480
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2486
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2492
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2500
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2505
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2513
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2517
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2523
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2527
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2532
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2587
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2591
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2595
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2605
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2649
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2655
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2659
		{
			yyVAL.str = "extended "
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2665
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2669
		{
			yyVAL.str = "full "
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2675
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2679
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2683
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2689
		{
			yyVAL.showFilter = nil
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2693
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2697
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2703
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2707
		{
			yyVAL.str = SessionStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2711
		{
			yyVAL.str = GlobalStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2717
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2721
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2727
		{
			yyVAL.statement = &Begin{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2731
		{
			yyVAL.statement = &Begin{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2737
		{
			yyVAL.statement = &Commit{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2743
		{
			yyVAL.statement = &Rollback{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2749
		{
			yyVAL.statement = &OtherRead{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2753
		{
			yyVAL.statement = &OtherRead{}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2757
		{
			yyVAL.statement = &OtherRead{}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2761
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2765
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2770
		{
			setAllowComments(yylex, true)
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2774
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2780
		{
			yyVAL.bytes2 = nil
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2784
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2790
		{
			yyVAL.str = UnionStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2794
		{
			yyVAL.str = UnionAllStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2798
		{
			yyVAL.str = UnionDistinctStr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2803
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2807
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2811
		{
			yyVAL.str = SQLCacheStr
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2816
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2820
		{
			yyVAL.str = DistinctStr
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2825
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.str = StraightJoinHint
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2834
		{
			yyVAL.selectExprs = nil
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2838
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2844
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2848
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2858
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2862
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2866
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2871
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2875
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2879
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2886
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2891
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2895
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2901
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2905
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2915
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2919
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2923
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2928
		{
			yyVAL.strs = []string{}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2932
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2942
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2974
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 535:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2978
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2984
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2989
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2993
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2999
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3003
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3016
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3020
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3024
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3028
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3034
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3036
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3040
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3042
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3046
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3048
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3051
		{
			yyVAL.empty = struct{}{}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3053
		{
			yyVAL.empty = struct{}{}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3056
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3060
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3064
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3071
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.str = JoinStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3081
		{
			yyVAL.str = JoinStr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3085
		{
			yyVAL.str = JoinStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3091
		{
			yyVAL.str = StraightJoinStr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3097
		{
			yyVAL.str = LeftJoinStr
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3101
		{
			yyVAL.str = LeftJoinStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3105
		{
			yyVAL.str = RightJoinStr
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3109
		{
			yyVAL.str = RightJoinStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3115
		{
			yyVAL.str = NaturalJoinStr
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3119
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3129
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3133
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3139
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3143
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3148
		{
			yyVAL.indexHints = nil
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3152
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3156
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3160
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3165
		{
			yyVAL.expr = nil
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3169
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3174
		{
			yyVAL.columns = nil
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3178
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3184
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3188
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3192
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3196
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3200
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3204
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3208
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3214
		{
			yyVAL.str = ""
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3218
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3246
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3258
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3262
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3266
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3270
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3276
		{
			yyVAL.str = IsNullStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3280
		{
			yyVAL.str = IsNotNullStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3284
		{
			yyVAL.str = IsTrueStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3288
		{
			yyVAL.str = IsNotTrueStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3292
		{
			yyVAL.str = IsFalseStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3296
		{
			yyVAL.str = IsNotFalseStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3302
		{
			yyVAL.str = EqualStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3306
		{
			yyVAL.str = LessThanStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3310
		{
			yyVAL.str = GreaterThanStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3314
		{
			yyVAL.str = LessEqualStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3318
		{
			yyVAL.str = GreaterEqualStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3322
		{
			yyVAL.str = NotEqualStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3326
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3330
		{
			yyVAL.str = PosixRegexStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3334
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3338
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3342
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3347
		{
			yyVAL.expr = nil
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3351
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3357
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3361
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3365
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3371
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3377
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3381
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3387
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3391
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3395
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3399
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3403
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3407
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3467
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3471
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3475
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3479
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3483
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3487
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3495
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3509
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3513
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3517
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3525
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3533
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3541
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3551
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3555
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3559
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3563
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3581
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3585
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 671:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3589
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3593
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 673:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3597
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 674:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3601
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3605
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 676:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3609
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 677:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3613
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 678:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3617
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 679:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3621
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3625
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3629
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3697
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3707
		{
			yyVAL.str = ""
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3711
		{
			yyVAL.str = BooleanModeStr
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3715
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 700:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3719
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3723
		{
			yyVAL.str = QueryExpansionStr
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3815
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3819
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3832
		{
			yyVAL.expr = nil
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3836
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3841
		{
			yyVAL.str = string("")
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3845
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3851
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3855
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3861
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3866
		{
			yyVAL.expr = nil
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3870
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3876
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3880
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3884
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3890
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3896
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3900
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3905
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3910
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3914
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3918
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3922
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3926
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3930
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3934
		{
			yyVAL.expr = &NullVal{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3940
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3949
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3953
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3958
		{
			yyVAL.exprs = nil
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3962
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3967
		{
			yyVAL.expr = nil
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3971
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3976
		{
			yyVAL.orderBy = nil
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3980
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3986
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3990
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3996
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4001
		{
			yyVAL.str = AscScr
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4005
		{
			yyVAL.str = AscScr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4009
		{
			yyVAL.str = DescScr
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4014
		{
			yyVAL.limit = nil
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4018
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4022
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4026
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4031
		{
			yyVAL.str = ""
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4035
		{
			yyVAL.str = ForUpdateStr
		}
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4039
		{
			yyVAL.str = ShareModeStr
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4052
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4056
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4060
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4065
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 775:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4069
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 776:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4073
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4080
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4084
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4088
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4092
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4097
		{
			yyVAL.updateExprs = nil
		}
	case 782:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4101
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4107
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4111
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4117
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4121
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4127
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4133
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4143
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4147
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4153
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4159
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4163
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4169
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4173
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4177
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4182
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4186
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4193
		{
			yyVAL.bytes = []byte("charset")
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4200
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4204
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4208
		{
			yyVAL.expr = &Default{}
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4217
		{
			yyVAL.byt = 0
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4219
		{
			yyVAL.byt = 1
		}
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4222
		{
			yyVAL.empty = struct{}{}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4224
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4227
		{
			yyVAL.str = ""
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4229
		{
			yyVAL.str = IgnoreStr
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4233
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4235
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4237
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4239
		{
			yyVAL.empty = struct{}{}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4241
		{
			yyVAL.empty = struct{}{}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4243
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4245
		{
			yyVAL.empty = struct{}{}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4247
		{
			yyVAL.empty = struct{}{}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4249
		{
			yyVAL.empty = struct{}{}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4251
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4254
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4256
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4258
		{
			yyVAL.empty = struct{}{}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4262
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4264
		{
			yyVAL.empty = struct{}{}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4268
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4272
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4279
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4285
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4289
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4294
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4301
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4307
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4311
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4315
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4321
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4325
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4329
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4335
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4339
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4346
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4353
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4357
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4364
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4648
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4657
		{
			decNesting(yylex)
		}
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4662
		{
			forceEOF(yylex)
		}
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4667
		{
			forceEOF(yylex)
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4671
		{
			forceEOF(yylex)
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4675
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
